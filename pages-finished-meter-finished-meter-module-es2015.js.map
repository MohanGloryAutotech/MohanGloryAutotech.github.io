{"version":3,"sources":["./src/app/@theme/services/finished-meter.service.ts","./src/app/@theme/services/quality.service.ts","./src/app/pages/finished-meter/add-edit-finished-meter/add-edit-finished-meter.component.ts","./src/app/pages/finished-meter/add-edit-finished-meter/add-edit-finished-meter.component.html","./src/app/@theme/model/finished-meter.ts","./src/app/pages/finished-meter/finished-meter.component.ts","./src/app/pages/finished-meter/finished-meter-routing.module.ts","./src/app/pages/finished-meter/finished-meter.module.ts"],"names":[],"mappings":"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","file":"pages-finished-meter-finished-meter-module-es2015.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { CommonService } from './common.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FinishedMeterService {\r\n\r\n  constructor(private httpClient:HttpClient,private commonService:CommonService) { \r\n  }\r\n\r\n  getAllQualityByParty(id){\r\n    return this.httpClient.get(this.commonService.envUrl()+'api/Quality/ByParty/'+id);\r\n  }\r\n  \r\n  getAllUserHeads(){\r\n    return this.httpClient.get(this.commonService.envUrl()+'api/userHead');\r\n  }\r\n\r\n  getPartyQualityByMaster(id){\r\n    return this.httpClient.get(this.commonService.envUrl()+'api/QualityAndParty/ByMaster/'+id);\r\n  }\r\n\r\n  getBatchByMasterId(id){\r\n    return this.httpClient.get(this.commonService.envUrl()+'api/batch/ByMaster/'+id);\r\n  }\r\n\r\n  getBatchDataBybatchNo(batchId, ctrlId){\r\n    return this.httpClient.get(this.commonService.envUrl()+'api/batch/'+ctrlId+'/'+batchId);\r\n  }\r\n\r\n  addFinishedMeter(data){\r\n    return this.httpClient.put(this.commonService.envUrl()+'api/batch/finishMtr', data);\r\n  }\r\n\r\n  getBatchesByPartyQuality(qId,pId){\r\n    return this.httpClient.get(this.commonService.envUrl()+'api/stockBatch/batch/ByQualityAndParty/'+qId+'/'+pId);\r\n  }\r\n  \r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { CommonService } from './common.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QualityService {\r\n  constructor(private httpClient: HttpClient, private commonService: CommonService) { }\r\n\r\n  addQuality(qualityData) {\r\n    return this.httpClient.post(this.commonService.envUrl() + 'api/quality', qualityData);\r\n  }\r\n\r\n  getallQuality(id, getBy): any {\r\n    return this.httpClient.get(this.commonService.envUrl() + 'api/quality/all/' + getBy + '/' + id);\r\n  }\r\n\r\n  getAllQualityWithNameOnly(){\r\n    return this.httpClient.get(this.commonService.envUrl()+'api/quality/allQuality');\r\n  }\r\n\r\n  getQualityById(id): any{\r\n    return this.httpClient.get(this.commonService.envUrl()+'api/quality/'+id);\r\n  }\r\n\r\n  updateQualityById(qualityData): any {\r\n    return this.httpClient.put(this.commonService.envUrl() + 'api/quality', qualityData);\r\n  }\r\n  getQualityNameData() {\r\n    return this.httpClient.get(this.commonService.envUrl() + 'api/quality/allQuality');\r\n  }\r\n  getQualityByParty(id): any{\r\n    return this.httpClient.get(this.commonService.envUrl() + 'api/Quality/ByParty/' + id);\r\n}\r\n}","import { Component, OnInit } from \"@angular/core\";\r\nimport * as errorData from \"app/@theme/json/error.json\";\r\nimport { BatchData, FinishedMeter } from \"app/@theme/model/finished-meter\";\r\nimport { CommonService } from \"app/@theme/services/common.service\";\r\nimport { FinishedMeterService } from \"app/@theme/services/finished-meter.service\";\r\nimport { QualityService } from \"app/@theme/services/quality.service\";\r\nimport { ToastrService } from \"ngx-toastr\";\r\n\r\n@Component({\r\n  selector: \"ngx-add-edit-finished-meter\",\r\n  templateUrl: \"./add-edit-finished-meter.component.html\",\r\n  styleUrls: [\"./add-edit-finished-meter.component.scss\"],\r\n})\r\nexport class AddEditFinishedMeterComponent implements OnInit {\r\n  public errorData: any = (errorData as any).default;\r\n  currentFinishedMeter;\r\n  user;\r\n  formSubmitted = false;\r\n  userHead;\r\n  masterList;\r\n  partyList;\r\n  batchList;\r\n  qualityList;\r\n  index: string;\r\n  indexOfBatchData: number = 1;\r\n  sequenceArray: Array<number> = [];\r\n  public totalFinishMeter: number = 0;\r\n\r\n  finishedMeterForm: FinishedMeter = new FinishedMeter();\r\n\r\n  constructor(\r\n    private commonService: CommonService,\r\n    private qualityService: QualityService,\r\n    private toastr: ToastrService,\r\n    private finishedMeterService: FinishedMeterService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.getData();\r\n    this.getAllParty();\r\n    this.getAllQuality();\r\n    this.getAllMasters();\r\n  }\r\n\r\n  //resetForm..\r\n  resetAll(myForm) {\r\n    this.batchList = null;\r\n    myForm.reset();\r\n  }\r\n\r\n  //get userId and userHeadId of logged in user and get current finishedMeter id from url\r\n  getData() {\r\n    this.user = this.commonService.getUser();\r\n  }\r\n\r\n  //getAll party list\r\n  getAllParty() {\r\n  }\r\n\r\n  //getAll quality list\r\n  getAllQuality() {\r\n    this.qualityService.getAllQualityWithNameOnly().subscribe(\r\n      (data) => {\r\n        if (data[\"success\"]) {\r\n          this.qualityList = data[\"data\"];\r\n        } else this.toastr.error(data[\"msg\"]);\r\n      },\r\n      (error) => {\r\n        this.toastr.error(errorData.Internal_Error);\r\n      }\r\n    );\r\n  }\r\n\r\n  //getAll master list\r\n  getAllMasters() {\r\n    this.finishedMeterService.getAllUserHeads().subscribe(\r\n      (data) => {\r\n        if (data[\"success\"]) {\r\n          this.masterList = data[\"data\"];\r\n        } else this.toastr.error(data[\"msg\"]);\r\n      },\r\n      (error) => {\r\n        this.toastr.error(errorData.Internal_Error);\r\n      }\r\n    );\r\n  }\r\n\r\n  //Party change event | get quality by partyId\r\n  enableQuality(event) {\r\n    this.qualityList = null;\r\n    this.finishedMeterForm.qualityId = null;\r\n    if (event != undefined) {\r\n      this.finishedMeterService\r\n        .getAllQualityByParty(this.finishedMeterForm.partyId)\r\n        .subscribe(\r\n          (data) => {\r\n            if (data[\"success\"]) {\r\n              this.qualityList = data[\"data\"].qualityDataList;\r\n              this.qualityList.forEach((element) => {\r\n                element.partyName = data[\"data\"].partyName;\r\n                element.partyId = data[\"data\"].partyId;\r\n              });\r\n            } else this.toastr.error(data[\"msg\"]);\r\n          },\r\n          (error) => {\r\n            this.toastr.error(errorData.Internal_Error);\r\n          }\r\n        );\r\n    } else {\r\n      this.batchList = null;\r\n      this.getAllParty();\r\n      this.getAllQuality();\r\n    }\r\n  }\r\n\r\n  //get batch data from batchId...\r\n  batchSelected(event) {\r\n    let controlId: string;\r\n    this.batchList.forEach((b) => {\r\n      if (this.finishedMeterForm.batchId == b.batchId) {\r\n        controlId = b.controlId;\r\n        if (this.finishedMeterForm.masterId) {\r\n          //set party and quality according to batch\r\n          this.finishedMeterForm.partyId = b.partyId;\r\n          this.finishedMeterForm.qualityId = b.qualityEntryId;\r\n        }\r\n      }\r\n    });\r\n\r\n    this.finishedMeterService\r\n      .getBatchDataBybatchNo(this.finishedMeterForm.batchId, controlId)\r\n      .subscribe(\r\n        (data) => {\r\n          if (data[\"success\"]) {\r\n            this.finishedMeterForm.batchData = data[\"data\"];\r\n\r\n            this.finishedMeterForm.batchData.forEach(e=>{\r\n              this.totalFinishMeter += e.finishMtr\r\n              if(e.mtr)\r\n                e.sequenceId = e.id\r\n            })\r\n            this.setSequenceNo(false);\r\n            this.setArrayOfSequence();\r\n            this.setfinishedSequenceAccordingToIdReverse();\r\n\r\n            let obj = new BatchData();\r\n            obj.batchId = data[\"data\"][0].batchId;\r\n            obj.controlId = data[\"data\"][0].controlId;\r\n            obj.seqNo = this.indexOfBatchData;\r\n            this.finishedMeterForm.batchData.push({ ...obj });\r\n            this.setSequenceNo(false);\r\n          } //else this.toastr.error(data[\"msg\"]);\r\n        },\r\n        (error) => {\r\n          // this.toastr.error(errorData.Internal_Error);\r\n        }\r\n      );\r\n  }\r\n\r\n  //Quality change event\r\n  qualitySelected(event) {\r\n    if (event != undefined) {\r\n      this.finishedMeterForm.batchId = null;\r\n      this.batchList = null;\r\n      let pid;\r\n      let qid;\r\n\r\n      //set party from quality...\r\n      if (!this.finishedMeterForm.partyId) {\r\n        let obj = this.qualityList.find(\r\n          (ob) => ob.id === this.finishedMeterForm.qualityId\r\n        );\r\n        this.finishedMeterForm.partyId = obj.partyId;\r\n      }\r\n\r\n      this.qualityList.forEach((e) => {\r\n        let id = e.id ? e.id : e.qualityEntryId;\r\n        if (id == this.finishedMeterForm.qualityId) {\r\n          pid = e.partyId;\r\n          qid = id;\r\n        }\r\n      });\r\n\r\n      this.finishedMeterService.getBatchesByPartyQuality(qid, pid).subscribe(\r\n        (data) => {\r\n          if (data[\"success\"]) {\r\n            this.batchList = data[\"data\"];\r\n          } //else this.toastr.error(data[\"msg\"]);\r\n        },\r\n        (error) => {\r\n          //this.toastr.error(errorData.Internal_Error);\r\n        }\r\n      );\r\n    } else {\r\n      this.finishedMeterForm.batchId = null;\r\n      this.batchList = null;\r\n      this.getAllQuality();\r\n    }\r\n  }\r\n\r\n  //Master change event | get party and quality by masterId and batch list by masterId\r\n  masterSelected(event) {\r\n    this.batchList = null;\r\n    this.finishedMeterForm.batchId = null;\r\n    if (event != undefined) {\r\n      this.qualityList.forEach((e) => {\r\n        let id = e.id ? e.id : e.qualityEntryId;\r\n        if (id == this.finishedMeterForm.qualityId)\r\n          this.finishedMeterForm.partyId = e.partyId;\r\n      });\r\n\r\n      //get batch by masterId\r\n      this.finishedMeterService\r\n        .getBatchByMasterId(this.finishedMeterForm.masterId)\r\n        .subscribe(\r\n          (data) => {\r\n            if (data[\"success\"]) {\r\n              this.batchList = data[\"data\"];\r\n            } else this.toastr.error(data[\"msg\"]);\r\n          },\r\n          (error) => {}\r\n        );\r\n    } else {\r\n      this.getAllParty();\r\n    }\r\n  }\r\n\r\n  //On enter pressed -> check empty field, add new row\r\n  onKeyUp(e, rowIndex, colIndex, colName) {\r\n    //catculate total finish meter\r\n    this.totalFinishMeter = this.finishedMeterForm.batchData\r\n      .map((a) => a.finishMtr)\r\n      .reduce(function (a, b) {\r\n        return a + b;\r\n      });\r\n\r\n    var keyCode = e.keyCode ? e.keyCode : e.which;\r\n    if (keyCode == 13 && (colIndex == 3 || colIndex == 4)) {\r\n      this.index = \"batchData\" + (rowIndex + 1) + \"-\" + colIndex;\r\n      if (rowIndex === this.finishedMeterForm.batchData.length - 1) {\r\n        let item = this.finishedMeterForm.batchData[rowIndex];\r\n        if (colName == \"fMeter\") {\r\n          if (!item.finishMtr) {\r\n            this.toastr.error(\"Enter finish meter and sequence to add new row\");\r\n            return;\r\n          }\r\n        } else if (colName == \"sequence\") {\r\n          if (!item.finishMtr) {\r\n            this.toastr.error(\"Enter finish meter and sequence to add new row\");\r\n            return;\r\n          }\r\n        }\r\n        let obj = new BatchData();\r\n        obj.seqNo = this.indexOfBatchData + 1;\r\n        obj.batchId = this.finishedMeterForm.batchData[0].batchId;\r\n        obj.controlId = this.finishedMeterForm.batchData[0].controlId;\r\n        let list = this.finishedMeterForm.batchData;\r\n        list.push(obj);\r\n        this.finishedMeterForm.batchData = [...list];\r\n        let interval = setInterval(() => {\r\n          let field = document.getElementById(this.index);\r\n          if (field != null) {\r\n            field.focus();\r\n            clearInterval(interval);\r\n          }\r\n        }, 10);\r\n        this.setSequenceNo(false);\r\n      } else {\r\n        let interval = setInterval(() => {\r\n          let field = document.getElementById(this.index);\r\n          if (field != null) {\r\n            field.focus();\r\n            clearInterval(interval);\r\n          }\r\n        }, 10);\r\n      }\r\n    }\r\n  }\r\n\r\n  //Remove meter data row from batchData list\r\n  removeMeter(event, rowIndex) {\r\n    let idCount = this.finishedMeterForm.batchData.length;\r\n    let item = this.finishedMeterForm.batchData;\r\n    if (idCount == 1) {\r\n      let obj = new BatchData();\r\n      obj.batchId = this.finishedMeterForm.batchData[0].batchId;\r\n      obj.controlId = this.finishedMeterForm.batchData[0].controlId;\r\n      let list = [{ ...obj }];\r\n      this.finishedMeterForm.batchData = [...list];\r\n    } else if (idCount - 1 == rowIndex) {\r\n      this.toastr.error(\"You can't remove last row\");\r\n    } else {\r\n      let removed = item.splice(rowIndex, 1);\r\n      let list = item;\r\n      this.finishedMeterForm.batchData = [...list];\r\n      this.sequenceArray.splice(rowIndex, 1);\r\n    }\r\n    this.setSequenceNo(false);\r\n  }\r\n\r\n  //Add finished Meter data\r\n  addFinishedMeter(myForm) {\r\n    let isFinishMtrflag = false;\r\n    let isSeqIdForExtraflag2 = false;\r\n    this.finishedMeterForm.batchData.forEach((b) => {\r\n      if (b.finishMtr == null) {\r\n        isFinishMtrflag = true;\r\n      }\r\n      if (\r\n        b.id == 0 &&\r\n        b.finishMtr > 0 &&\r\n        (b.sequenceId == 0 || b.sequenceId == null)\r\n      )\r\n        isSeqIdForExtraflag2 = true;\r\n    });\r\n    if (isFinishMtrflag == false) {\r\n      if (isSeqIdForExtraflag2) {\r\n        this.toastr.error(\"Please enter sequence id for extra meter\");\r\n      } else {\r\n        let f = false;\r\n        this.finishedMeterForm.batchData.forEach((e) => {\r\n          if (!e.mtr) if (!e.finishMtr && e.sequenceId) f = true;\r\n        });\r\n        if (f) {\r\n          this.toastr.error(\"Please fill sequence id and finish meter both.\");\r\n        } else {\r\n          let count = 0;\r\n          this.finishedMeterForm.batchData.forEach((e) => {\r\n            if (\r\n              e.id == 0 &&\r\n              e.mtr == null &&\r\n              (e.finishMtr == 0 || e.finishMtr == null)\r\n            ) {\r\n              this.finishedMeterForm.batchData.splice(count, 1);\r\n            }\r\n            count++;\r\n          });\r\n\r\n          let allSequenceValid = true;\r\n          this.setfinishedSequenceAccordingToId();\r\n          this.finishedMeterForm.batchData.forEach((e) => {\r\n            let isIdValid = this.finishedMeterForm.batchData.some(\r\n              (ob) => ob.id === e.sequenceId\r\n            );\r\n            if (!isIdValid) allSequenceValid = false;\r\n          });\r\n          if (allSequenceValid) {\r\n            this.finishedMeterService\r\n              .addFinishedMeter(this.finishedMeterForm.batchData)\r\n              .subscribe(\r\n                (data) => {\r\n                  if (data[\"success\"]) {\r\n                    this.toastr.success(data[\"msg\"]);\r\n                    myForm.reset();\r\n                    this.batchList = null;\r\n                    this.finishedMeterForm.batchData = null;\r\n                  } else {\r\n                    this.toastr.error(data[\"msg\"]);\r\n                    this.setSequenceNo(false);\r\n                  }\r\n                },\r\n                (error) => {\r\n                  this.toastr.error(errorData.Internal_Error);\r\n                  this.setSequenceNo(false);\r\n                }\r\n              );\r\n          } else {\r\n            this.toastr.error(\"Invalid sequence-id entered\");\r\n            this.setfinishedSequenceAccordingToIdReverse();\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      this.toastr.error(\"Enter all data\");\r\n    }\r\n  }\r\n\r\n  setArrayOfSequence() {\r\n    for (let i = 0; i < this.indexOfBatchData - 1; i++) {\r\n      this.sequenceArray[i] = this.finishedMeterForm.batchData[i].id;\r\n    }\r\n  }\r\n\r\n  //for add\r\n  setfinishedSequenceAccordingToId() {\r\n    this.finishedMeterForm.batchData.forEach((e) => {\r\n      e.sequenceId = this.sequenceArray[e.sequenceId - 1];\r\n    });\r\n  }\r\n\r\n  //for update\r\n  setfinishedSequenceAccordingToIdReverse() {\r\n    this.finishedMeterForm.batchData.forEach((e) => {\r\n      e.sequenceId = this.sequenceArray.indexOf(e.sequenceId) + 1;\r\n    });\r\n  }\r\n\r\n  setSequenceNo(isFirstTime) {\r\n    this.indexOfBatchData = 1;\r\n    this.finishedMeterForm.batchData.forEach((e) => {\r\n      e.seqNo = this.indexOfBatchData;\r\n      this.indexOfBatchData++;\r\n      if (isFirstTime) e.sequenceId = e.id;\r\n    });\r\n  }\r\n}\r\n","<nb-card class=\"nb-style\">\r\n  <nb-card-header class=\"nb-header\">\r\n    <div>\r\n      <h2 class=\"nb-text\">Finished Meter</h2>\r\n    </div>\r\n  </nb-card-header>\r\n  <nb-card-body>\r\n    <div>\r\n      <form #myForm=\"ngForm\">\r\n        <div class=\"row\">\r\n          <div class=\"col-md-4\">\r\n            <div class=\"form-group\">\r\n              <label>Master</label>\r\n              <ng-select name=\"masterId\" [(ngModel)]='finishedMeterForm.masterId' required #partyId1=\"ngModel\"\r\n                [ngClass]=\"{'is-invalid': formSubmitted && partyId1.invalid}\" (change)=\"masterSelected($event)\"\r\n                placeholder=\"Select Master\" class=\"required-error-dropdown\">\r\n                <ng-option *ngFor=\"let master of masterList\" [value]=\"master.id\">{{master.userName}}</ng-option>\r\n              </ng-select>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-md-4\">\r\n            <div class=\"form-group\">\r\n              <label>Party</label>\r\n              <ng-select name=\"partyId\" [(ngModel)]='finishedMeterForm.partyId' #partyId1=\"ngModel\"\r\n                (change)=\"enableQuality($event)\" placeholder=\"Select Party\">\r\n                <ng-option *ngFor=\"let p of partyList\" [value]=\"p.id\">{{p.partyName}}</ng-option>\r\n              </ng-select>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-md-4\">\r\n            <div class=\"form-group\">\r\n              <label>Quality</label>\r\n              <ng-select name=\"qualityId\" [(ngModel)]='finishedMeterForm.qualityId' #qualityId1=\"ngModel\"\r\n                placeholder=\"Select Quality\" (change)=\"qualitySelected($event)\">\r\n                <ng-option *ngFor=\"let q of qualityList\" [value]=\"q.id?q.id:q.qualityEntryId\">{{q.qualityId}}\r\n                </ng-option>\r\n              </ng-select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n          <div class=\"col-md-4\">\r\n            <div class=\"form-group\">\r\n              <label>Batch</label>\r\n              <ng-select name=\"batchId\" [(ngModel)]='finishedMeterForm.batchId' #batchId1=\"ngModel\"\r\n                placeholder=\"Select Batch\" (change)=\"batchSelected($event)\">\r\n                <ng-option *ngFor=\"let b of batchList\" [disabled]=\"b.prodctionPlanned\" [value]=\"b.batchId\">{{b.batchId}}\r\n                </ng-option>\r\n              </ng-select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <br>\r\n        <div class=\"row\" *ngIf=\"finishedMeterForm.batchId\">\r\n          <div class=\"col-md-12\">\r\n            <ngx-datatable #table class=\"material common-table datatable-auto-height\"\r\n              [rows]=\"finishedMeterForm.batchData\" [headerHeight]=\"31\" [footerHeight]=\"30\">\r\n\r\n              <ngx-datatable-column name=\"Action\" sortable=\"false\" prop=\"mtr\">\r\n                <ng-template let-row=\"row\" let-value=\"value\" ngx-datatable-cell-template let-rowIndex=\"rowIndex\">\r\n                  <nb-icon icon=\"trash\" status=\"danger\" (click)=\"removeMeter($event, rowIndex)\"\r\n                    [options]=\"{ animation: { type: 'zoom' } }\"></nb-icon>\r\n                </ng-template>\r\n              </ngx-datatable-column>\r\n\r\n              <ngx-datatable-column name=\"Gr Meter Sequence\" prop=\"seqNo\" [sortable]=\"false\" [width]=\"300\">\r\n              </ngx-datatable-column>\r\n\r\n              <ngx-datatable-column name=\"Gr Meter\" prop=\"mtr\" [sortable]=\"false\" [width]=\"300\"></ngx-datatable-column>\r\n\r\n              <ngx-datatable-column name=\"Finish Meter\" prop=\"finishMtr\" [sortable]=\"false\" [width]=\"300\">\r\n                <ng-template let-row=\"row\" ngx-datatable-cell-template let-rowIndex=\"rowIndex\">\r\n                  <input class=\"tableForm\" type=\"number\"\r\n                    [disabled]=\"finishedMeterForm.batchData[rowIndex].isBillGenrated\" #tableMeter1=\"ngModel\"\r\n                    name='tableFinishMeter{{rowIndex}}' [(ngModel)]=\"row.finishMtr\"\r\n                    (keyup)=\"onKeyUp($event,rowIndex,3,'fMeter')\" [id]=\"'batchData'+rowIndex+'-3'\" required\r\n                    [ngClass]=\"{'is-invalid': formSubmitted && tableMeter1.invalid}\">\r\n                  <div class=\"invalid-feedback\" *ngIf=\"formSubmitted && (tableMeter1.invalid )\"\r\n                    style=\"display: inline-block;\">\r\n                    <span>Required</span>\r\n                  </div>\r\n                </ng-template>\r\n              </ngx-datatable-column>\r\n\r\n              <ngx-datatable-column name=\"Finish Meter Sequence\" prop=\"sequenceId\" [sortable]=\"false\" [width]=\"300\">\r\n                <ng-template let-row=\"row\" ngx-datatable-cell-template let-rowIndex=\"rowIndex\">\r\n                  <input class=\"tableForm\" type=\"number\" #tableWeight1=\"ngModel\" name='tableSequence{{rowIndex}}'\r\n                  [disabled]=\"finishedMeterForm.batchData[rowIndex].isBillGenrated\" \r\n                    [(ngModel)]=\"row.sequenceId\" (keyup)=\"onKeyUp($event,rowIndex,4,'sequence')\"\r\n                    [id]=\"'batchData'+rowIndex+'-4'\" required\r\n                    [ngClass]=\"{'is-invalid': formSubmitted && tableWeight1.invalid}\">\r\n                  <div class=\"invalid-feedback\" *ngIf=\"formSubmitted && (tableWeight1.invalid )\"\r\n                    style=\"display: inline-block;\">\r\n                    <span>Required</span>\r\n                  </div>\r\n                </ng-template>\r\n              </ngx-datatable-column>\r\n\r\n              <ngx-datatable-footer>\r\n                <ng-template ngx-datatable-footer-template let-rowCount=\"rowCount\">\r\n\r\n                  <div class=\"col-md-12\">\r\n                    <div class=\"toal-finish-mtr\">\r\n                      Total finish mtr: {{totalFinishMeter}}\r\n                    </div>\r\n                  </div>\r\n                </ng-template>\r\n              </ngx-datatable-footer>\r\n\r\n            </ngx-datatable>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n          <div class=\"col-md-12 mobile-btn-center text-btn-right\">\r\n            <div class=\"padding-bt-tp\">\r\n              <button class=\"btn btn-primary btn-sm btn-design\" (click)=\"resetAll(myForm)\" type=\"button\"\r\n                routerLink=\"/pages/finishedMeter\">CANCEL</button>\r\n              <button type=\"button\" class=\"btn btn-primary btn-sm btn-design\" style=\"margin-right:20px\"\r\n                (click)=\"addFinishedMeter(myForm)\">SAVE</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </nb-card-body>\r\n</nb-card>","export class FinishedMeter {\r\n    id:Number;\r\n    createdBy:Number;\r\n    updatedBy:Number;\r\n    userHeadId:Number;\r\n    partyId:Number;\r\n    qualityId:Number;\r\n    masterId:Number;\r\n    batchId:Number = null;\r\n    batchData: BatchData[];\r\n}\r\n\r\nexport class BatchData{\r\n    seqNo: number;\r\n    id:number;\r\n    mtr:number;\r\n    wt:number;\r\n    batchId:string;\r\n    controlId:number;\r\n    isProductionPlanned:Boolean = false;\r\n    isExtra:Boolean = false;\r\n    sequenceId:number;\r\n    finishMtr:number;\r\n    isBillGenrated:Boolean = false;\r\n\r\n    constructor(){\r\n        this.seqNo= 0;\r\n        this.id=0;\r\n        this.mtr=null;\r\n        this.wt=null;\r\n        this.batchId='';\r\n        this.controlId=0;\r\n        this.isProductionPlanned= false;\r\n        this.isExtra= false;\r\n        this.sequenceId=0;\r\n        this.finishMtr=0;\r\n        this.isBillGenrated= false;   \r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { CommonService } from 'app/@theme/services/common.service';\r\n\r\n@Component({\r\n  selector: 'ngx-finished-meter',\r\n  templateUrl: './finished-meter.component.html',\r\n  styleUrls: ['./finished-meter.component.scss']\r\n})\r\nexport class FinishedMeterComponent implements OnInit {\r\n\r\n  constructor(private commonService:CommonService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AddEditFinishedMeterComponent } from './add-edit-finished-meter/add-edit-finished-meter.component';\r\n\r\nimport { FinishedMeterComponent } from './finished-meter.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path:'',\r\n    component:AddEditFinishedMeterComponent,\r\n    // canActivate:[FinishedMeterGuard],\r\n    // canLoad:[FinishedMeterGuard],\r\n    \r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n  //providers: [FinishedMeterGuard]\r\n})\r\nexport class FinishedMeterRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FinishedMeterRoutingModule } from './finished-meter-routing.module';\r\nimport { FinishedMeterComponent } from './finished-meter.component';\r\nimport { AddEditFinishedMeterComponent } from './add-edit-finished-meter/add-edit-finished-meter.component';\r\nimport { SharedModule } from 'app/@theme/shared.module';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { NbCheckboxModule } from '@nebular/theme';\r\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\r\n\r\n\r\n@NgModule({\r\n  declarations: [FinishedMeterComponent, AddEditFinishedMeterComponent],\r\n  imports: [\r\n    CommonModule,\r\n    SharedModule,\r\n    ReactiveFormsModule,\r\n    NbCheckboxModule,\r\n    NgxDatatableModule,\r\n    FinishedMeterRoutingModule\r\n  ]\r\n})\r\nexport class FinishedMeterModule { }\r\n"],"sourceRoot":"webpack:///"}