{"version":3,"sources":["webpack:///src/app/pages/add-product/add-price/add-price.component.ts","webpack:///src/app/pages/add-product/add-price/add-price.component.html","webpack:///src/app/pages/add-product/add-product-routing.module.ts","webpack:///src/app/pages/add-product/add-new-product/add-new-product.component.ts","webpack:///src/app/pages/add-product/add-new-product/add-new-product.component.html","webpack:///src/app/@theme/model/Price-categpry.ts","webpack:///src/app/pages/add-product/add-product.component.ts","webpack:///src/app/@theme/model/Product.ts","webpack:///src/app/pages/add-product/add-product.module.ts"],"names":["AddPriceComponent","_route","productService","route","toastr","partyService","commonService","priceList","formSubmitted","categoryList","isCategory","setTitle","currentProduct","Number","snapshot","paramMap","get","getProductListById","getAllCategory","getProductPriceListById","subscribe","data","length","error","getProductById","currentProductData","getProductPriceById","forEach","e","p","categoryId","id","category","productId","push","console","log","rowIndex","colIndex","keyCode","which","index","interval","setInterval","field","document","getElementById","focus","clearInterval","navigate","myForm","valid","savePrice","success","selector","templateUrl","styleUrls","routes","path","component","AddProductRoutingModule","forChild","imports","exports","AddNewProductComponent","orderService","product","capacityList","qualityList","typeList","packageSizeList","currentProductId","getAllCapacityList","getAllQuality","getAllPackageSize","getAllTypes","getAllCapacity","getAllType","addNewProduct","updateProduct","resetForm","addProduct","PriceCategory","price","AddProductComponent","Product","AddProductModule","declarations"],"mappings":"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","file":"pages-add-product-add-product-module-es5.js","sourcesContent":["import { Component, OnInit } from \"@angular/core\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { PriceCategory } from \"app/@theme/model/Price-categpry\";\r\nimport { CommonService } from \"app/@theme/services/common.service\";\r\nimport { PartyService } from \"app/@theme/services/party.service\";\r\nimport { ProductService } from \"app/@theme/services/product.service\";\r\nimport { ToastrService } from \"ngx-toastr\";\r\n\r\n@Component({\r\n  selector: \"ngx-add-price\",\r\n  templateUrl: \"./add-price.component.html\",\r\n  styleUrls: [\"./add-price.component.scss\"],\r\n})\r\nexport class AddPriceComponent implements OnInit {\r\n  public priceList: PriceCategory[] = [];\r\n  public currentProduct: number;\r\n  public formSubmitted: boolean = false;\r\n  public index: any;\r\n  public categoryList: any = [];\r\n  public isCategory: boolean = true;\r\n  public currentProductData:any;\r\n\r\n  constructor(\r\n    private _route: ActivatedRoute,\r\n    private productService: ProductService,\r\n    private route: Router,\r\n    private toastr: ToastrService,\r\n    private partyService: PartyService,\r\n    private commonService: CommonService,\r\n  ) {\r\n    this.commonService.setTitle('Add Price');\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.currentProduct = Number(this._route.snapshot.paramMap.get(\"id\"));\r\n    this.getProductListById();\r\n    this.getAllCategory();\r\n    if (this.currentProduct){\r\n      this.getProductPriceListById();\r\n    } \r\n  }\r\n\r\n  getAllCategory() {\r\n    this.partyService.getAllCategory().subscribe(\r\n      (data) => {\r\n        if (data[\"success\"]) {\r\n          if (data[\"data\"].length) {\r\n            this.categoryList = data[\"data\"];\r\n            this.isCategory = true;\r\n          } else this.isCategory = false;\r\n        } else this.isCategory = false;\r\n      },\r\n      (error) => {\r\n        this.isCategory = false;\r\n      }\r\n    );\r\n  }\r\n\r\n  getProductListById(){\r\n    this.productService.getProductById(this.currentProduct).subscribe(\r\n      data=>{\r\n        if(data['success']){\r\n          this.currentProductData = data['data']\r\n        }\r\n        else{\r\n          this.toastr.error(data['msg']);\r\n        }\r\n      },error=>{\r\n        this.toastr.error('Internal server error')\r\n      }\r\n    )\r\n  }\r\n\r\n  getProductPriceListById() {\r\n    this.productService.getProductPriceById(this.currentProduct).subscribe(\r\n      (data) => {\r\n        if (data[\"success\"]) {\r\n          if (data[\"data\"] != null) this.priceList = data[\"data\"];\r\n        } else {\r\n          this.categoryList.forEach(e => {\r\n            let p = new PriceCategory();\r\n            p.categoryId = e.id;\r\n            p.category = e.category\r\n            p.productId = this.currentProduct;\r\n\r\n            this.priceList.push(p);\r\n          });\r\n          console.log(this.priceList)\r\n        }\r\n      },\r\n      (error) => {\r\n        this.toastr.error(\"Internal server error\");\r\n      }\r\n    );\r\n  }\r\n\r\n  onKeyUp(e, rowIndex, colIndex) {\r\n    var keyCode = e.keyCode ? e.keyCode : e.which;\r\n    if (keyCode == 13) {\r\n      this.index = \"price\" + (rowIndex + 1) + \"-\" + colIndex;\r\n      let interval = setInterval(() => {\r\n        let field = document.getElementById(this.index);\r\n        if (field != null) {\r\n          field.focus();\r\n          clearInterval(interval);\r\n        }\r\n      }, 10);\r\n    }\r\n  }\r\n\r\n  cancel() {\r\n    this.route.navigate([\"pages/order\"]);\r\n  }\r\n\r\n  savePrice(myForm) {\r\n    this.formSubmitted = true;\r\n    if (myForm.valid) {\r\n      this.productService.savePrice(this.priceList).subscribe(\r\n        (data) => {\r\n          if (data[\"success\"]) {\r\n            this.toastr.success(\"Saved successfully\");\r\n            this.route.navigate([\"pages/order\"]);\r\n          } else this.toastr.success(data[\"msg\"]);\r\n        },\r\n        (error) => {\r\n          this.toastr.error(\"Internal server error\");\r\n        }\r\n      );\r\n    }\r\n  }\r\n}\r\n","<nb-card class=\"nb-style\">\r\n    <!-- <nb-card-header class=\"nb-header\">\r\n        <div>\r\n            <h2 class=\"nb-text\">Add Price</h2>\r\n        </div>\r\n    </nb-card-header> -->\r\n    <nb-card-body>\r\n        <div *ngIf=\"isCategory\">\r\n            <form #myForm=\"ngForm\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-2\"></div>\r\n                    <div class=\"col-md-4\">\r\n                        <div class=\"form-group\" *ngIf=\"currentProductData\">\r\n\r\n                            <label>Product-ID</label>\r\n                            <input type=\"text\" name=\"typeId\" [(ngModel)]='currentProductData.id' required #product=\"ngModel\"\r\n                                [ngClass]=\"{'is-invalid': formSubmitted && product.invalid}\">\r\n                            <div class=\"text-danger\" style=\"font-size: small;\"\r\n                                *ngIf=\"(product.invalid)&&(formSubmitted || product.touched)\">\r\n                                <span>Product is required.</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- For Ngx DataTable -->\r\n            <div class=\"row\" *ngIf=\"priceList.length != 0\">\r\n                <div class=\"col-md-12\">\r\n                    <ngx-datatable #table class=\"material common-table datatable-auto-height\"\r\n                        [rows]=\"priceList\" [headerHeight]=\"31\" [footerHeight]=\"31\">\r\n\r\n                        <ngx-datatable-column name=\"Category\" prop=\"category\" [sortable]=\"false\" [width]=\"300\">\r\n                        </ngx-datatable-column>\r\n\r\n                        <ngx-datatable-column name=\"Price\" prop=\"price\" [sortable]=\"false\" [width]=\"300\">\r\n                            <ng-template let-row=\"row\" ngx-datatable-cell-template let-rowIndex=\"rowIndex\">\r\n                                <input class=\"tableForm\" type=\"number\" #price=\"ngModel\"\r\n                                    name='price{{rowIndex}}' [(ngModel)]=\"row.price\"\r\n                                    (keyup)=\"onKeyUp($event,rowIndex,2)\"\r\n                                    [id]=\"'price'+rowIndex+'-2'\" required\r\n                                    [ngClass]=\"{'is-invalid': formSubmitted && price.invalid}\" min=\"0\">\r\n                                <div class=\"invalid-feedback\" *ngIf=\"formSubmitted && (price.invalid)\"\r\n                                    style=\"display: inline-block;\">\r\n                                    <span>Required</span>\r\n                                </div>\r\n                            </ng-template>\r\n                        </ngx-datatable-column>\r\n\r\n                    </ngx-datatable>\r\n                </div>\r\n            </div>\r\n\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-12 mobile-btn-center text-btn-right\">\r\n                        <div class=\"padding-bt-tp\">\r\n                            <button class=\"btn btn-primary btn-sm btn-design btn-product\" type=\"button\" style=\"margin-right: 10px;\"\r\n                            (click)=\"cancel()\">CANCEL</button>\r\n                            <button type=\"button\" class=\"btn btn-primary btn-sm btn-design btn-product\" style=\"margin-right:20px\"\r\n                                (click)=\"savePrice(myForm)\">SAVE</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n        <div *ngIf=\"!isCategory\">\r\n            <h3>No category available</h3>\r\n        </div>\r\n    </nb-card-body>\r\n</nb-card>","import { NgModule } from \"@angular/core\";\r\nimport { Routes, RouterModule } from \"@angular/router\";\r\nimport { AddNewProductComponent } from \"./add-new-product/add-new-product.component\";\r\nimport { AddPriceComponent } from \"./add-price/add-price.component\";\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: \"\",\r\n    component: AddNewProductComponent,\r\n  },\r\n  {\r\n    path: \"add\",\r\n    component: AddNewProductComponent,\r\n  },\r\n  {\r\n    path: \"edit/:id\",\r\n    component: AddNewProductComponent,\r\n  },\r\n  {\r\n    path: \"addPrice/:id\",\r\n    component: AddPriceComponent,\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AddProductRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { PlaceOrder } from 'app/@theme/model/order';\r\nimport { Product } from 'app/@theme/model/Product';\r\nimport { CommonService } from 'app/@theme/services/common.service';\r\nimport { OrderService } from 'app/@theme/services/order.service';\r\nimport { ProductService } from 'app/@theme/services/product.service';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Component({\r\n  selector: 'ngx-add-new-product',\r\n  templateUrl: './add-new-product.component.html',\r\n  styleUrls: ['./add-new-product.component.scss']\r\n})\r\nexport class AddNewProductComponent implements OnInit {\r\n\r\n  product: Product = new Product();\r\n  formSubmitted: boolean = false;\r\n  capacityList: any = [];\r\n  qualityList: any = [];\r\n  typeList: any = [];\r\n  packageSizeList: any = [];\r\n  currentProductId: Number;\r\n\r\n  constructor(\r\n    private productService: ProductService,\r\n    private toastr: ToastrService,\r\n    private route: Router,\r\n    private orderService: OrderService,\r\n    private _route: ActivatedRoute,\r\n    private commonService: CommonService\r\n  ) {\r\n    this.commonService.setTitle('Add Product');\r\n   }\r\n\r\n  ngOnInit(): void {\r\n    this.currentProductId = Number(this._route.snapshot.paramMap.get('id'));\r\n    this.getAllCapacityList();\r\n    this.getAllQuality();\r\n    this.getAllPackageSize();\r\n    this.getAllTypes();\r\n    if(this.currentProductId){\r\n      this.getProductById();\r\n    }\r\n  }\r\n\r\n  getProductById(){\r\n    this.productService.getProductById(this.currentProductId).subscribe(\r\n      data=>{\r\n        if(data['success']){\r\n          this.product = data['data'];\r\n        }\r\n        else\r\n        this.toastr.error(data['msg']);\r\n      },\r\n      error=>{\r\n        this.toastr.error('Internal server error');\r\n      }\r\n    )\r\n  }\r\n\r\n  getAllCapacityList() {\r\n    this.orderService.getAllCapacity().subscribe(\r\n      (data) => {\r\n        this.capacityList = data[\"data\"];\r\n      },\r\n      (error) => {}\r\n    );\r\n  }\r\n\r\n  getAllQuality() {\r\n    this.orderService.getAllQuality().subscribe(\r\n      (data) => {\r\n        this.qualityList = data[\"data\"];\r\n      },\r\n      (error) => {}\r\n    );\r\n  }\r\n\r\n  getAllPackageSize() {\r\n    this.orderService.getAllPackageSize().subscribe(\r\n      (data) => {\r\n        this.packageSizeList = data[\"data\"];\r\n      },\r\n      (error) => {}\r\n    );\r\n  }\r\n\r\n  getAllTypes() {\r\n    this.orderService.getAllType().subscribe(\r\n      (data) => {\r\n        this.typeList = data[\"data\"];\r\n      },\r\n      (error) => {}\r\n    );\r\n  }\r\n\r\n  addProduct(myForm){\r\n    this.formSubmitted = true;\r\n    if(myForm.valid){\r\n      //call api for add product..\r\n      this.productService.addNewProduct(this.product).subscribe(\r\n        data=>{\r\n          if(data['success']){\r\n            this.toastr.success('Product added successfully')\r\n            this.route.navigate(['pages/order']);\r\n          }\r\n        },\r\n        error=>{\r\n          \r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  resetForm(myForm){\r\n    this.route.navigate(['pages/order']);\r\n  }\r\n\r\n  updateProduct(myForm){\r\n    this.formSubmitted = true;\r\n    if(myForm.valid){\r\n      this.productService.updateProduct(this.product).subscribe(\r\n        data=>{\r\n          if(data['success']){\r\n            this.toastr.success('Product updated successfully')\r\n            this.route.navigate(['pages/order']);\r\n          }\r\n        },\r\n        error=>{\r\n          \r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  \r\n}\r\n","<nb-card class=\"nb-style\">\r\n    <!-- <nb-card-header class=\"nb-header\">\r\n        <div *ngIf=\"!currentProductId\">\r\n            <h2 class=\"nb-text\">Add New Product</h2>\r\n        </div>\r\n        <div *ngIf=\"currentProductId\">\r\n            <h2 class=\"nb-text\">Update Product</h2>\r\n        </div>\r\n    </nb-card-header> -->\r\n    <nb-card-body>\r\n        <div>\r\n            <form #myForm=\"ngForm\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-2\"></div>\r\n                    <div class=\"col-md-4\">\r\n                        <div class=\"form-group\">\r\n\r\n                            <label>Type</label>\r\n                            <ng-select name=\"typeId\" [(ngModel)]='product.productType' required #type1=\"ngModel\"\r\n                                [ngClass]=\"{'is-invalid': formSubmitted && type1.invalid}\" placeholder=\"Select Type\"\r\n                                class=\"required-error-dropdown\">\r\n                                <ng-option *ngFor=\"let type of typeList\" [value]=\"type.type\">{{type.type}}</ng-option>\r\n                            </ng-select>\r\n                            <div class=\"text-danger\" style=\"font-size: small;\"\r\n                                *ngIf=\"(type1.invalid)&&(formSubmitted || type1.touched)\">\r\n                                <span>Type is required.</span>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"col-md-4\">\r\n                        <div class=\"form-group\">\r\n                            <label>Quality</label>\r\n                            <ng-select name=\"qualityId\" [(ngModel)]='product.productQuality' required\r\n                                #quality1=\"ngModel\" [ngClass]=\"{'is-invalid': formSubmitted && quality1.invalid}\"\r\n                                placeholder=\"Select Quality\" class=\"required-error-dropdown\">\r\n                                <ng-option *ngFor=\"let q of qualityList\" [value]=\"q.quality\">{{q.quality}}</ng-option>\r\n                            </ng-select>\r\n                            <div class=\"text-danger\" style=\"font-size: small;\"\r\n                                *ngIf=\"(quality1.invalid)&&(formSubmitted || quality1.touched)\">\r\n                                <span>Quality is required.</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-md-2\"></div>\r\n                </div>\r\n\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-2\"></div>\r\n                    <div class=\"col-md-4\">\r\n                        <div class=\"form-group\">\r\n                            <label>Catpacity</label>\r\n                            <ng-select name=\"capacityId\" [(ngModel)]='product.productCapacity' required\r\n                                #capacity1=\"ngModel\" [ngClass]=\"{'is-invalid': formSubmitted && capacity1.invalid}\"\r\n                                placeholder=\"Select Capacity\" class=\"required-error-dropdown\">\r\n                                <ng-option *ngFor=\"let capacity of capacityList\" [value]=\"capacity.capacity\">\r\n                                    {{capacity.capacity}}\r\n                                </ng-option>\r\n                            </ng-select>\r\n                            <div class=\"text-danger\" style=\"font-size: small;\"\r\n                                *ngIf=\"(capacity1.invalid)&&(formSubmitted || capacity1.touched)\">\r\n                                <span>Capacity is required.</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"col-md-4\">\r\n                        <div class=\"form-group\">\r\n                            <label>PackageSize</label>\r\n                            <ng-select name=\"packageSizeId\" [(ngModel)]='product.productPackageSize' required\r\n                                #packageSize1=\"ngModel\"\r\n                                [ngClass]=\"{'is-invalid': formSubmitted && packageSize1.invalid}\"\r\n                                placeholder=\"Select PackageSize\" class=\"required-error-dropdown\">\r\n                                <ng-option *ngFor=\"let p of packageSizeList\" [value]=\"p.packageSize\">{{p.packageSize}}\r\n                                </ng-option>\r\n                            </ng-select>\r\n                            <div class=\"text-danger\" style=\"font-size: small;\"\r\n                                *ngIf=\"(packageSize1.invalid)&&(formSubmitted || packageSize1.touched)\">\r\n                                <span>Package-size is required.</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-md-2\"></div>\r\n                </div>\r\n\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-2\"></div>\r\n                    <div class=\"col-md-4\">\r\n                        <div class=\"form-group\">\r\n                            <label>Quantity</label>\r\n                            <input type=\"number\" name=\"quantity\" class=\"form-control\" #quantity=\"ngModel\"\r\n                                [(ngModel)]='product.quantity' required\r\n                                [ngClass]=\"{'is-invalid':(quantity.invalid)&&(formSubmitted || quantity.touched)}\"\r\n                                placeholder=\"Quantity\">\r\n                            <div class=\"invalid-feedback\"\r\n                                *ngIf=\"(quantity.invalid)&&(formSubmitted || quantity.touched)\">\r\n                                <span>Quantity is required.</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div class=\"row\">\r\n\r\n\r\n                    <div class=\"col-md-6 col-6\">\r\n                        <div class=\"padding-bt-tp text-right\">\r\n                            <button class=\"btn btn-primary btn-sm btn-design btn-product\" type=\"button\"\r\n                                (click)=\"resetForm(myForm)\">CANCEL</button>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-md-6 col-6\">\r\n                        <div class=\"padding-bt-tp text-left\">\r\n                            <button type=\"button\" class=\"btn btn-primary btn-sm btn-design btn-product\"\r\n                                style=\"margin-right:20px\"\r\n                                (click)=\"this.currentProductId? updateProduct(myForm) : addProduct(myForm)\">SAVE</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </form>\r\n        </div>\r\n    </nb-card-body>\r\n</nb-card>","export class PriceCategory {\r\n    id:number;\r\n    productId:number;\r\n    categoryId:number;\r\n    price:number;\r\n    category:string;\r\n\r\n    constructor(){\r\n        this.id = null;\r\n        this.price = null;\r\n        this.productId = null;\r\n        this.categoryId = null;\r\n        this.category = null;\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ngx-add-product',\r\n  templateUrl: './add-product.component.html',\r\n  styleUrls: ['./add-product.component.scss']\r\n})\r\nexport class AddProductComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","export class Product {\r\n    id:Number;\r\n    productCapacity: number;\r\n    productPackageSize: number;\r\n    productQuality: string;\r\n    productType: string;\r\n    quantity:number;\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AddProductRoutingModule } from './add-product-routing.module';\r\nimport { AddProductComponent } from './add-product.component';\r\nimport { AddNewProductComponent } from './add-new-product/add-new-product.component';\r\nimport { SharedModule } from 'app/@theme/shared.module';\r\nimport { AddPriceComponent } from './add-price/add-price.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [AddProductComponent, AddNewProductComponent, AddPriceComponent],\r\n  imports: [\r\n    CommonModule,\r\n    AddProductRoutingModule,\r\n    SharedModule\r\n  ]\r\n})\r\nexport class AddProductModule { }\r\n"]}