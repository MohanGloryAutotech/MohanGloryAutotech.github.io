{"version":3,"sources":["webpack:///src/app/@theme/services/finished-meter.service.ts","webpack:///src/app/@theme/services/quality.service.ts","webpack:///src/app/pages/finished-meter/add-edit-finished-meter/add-edit-finished-meter.component.ts","webpack:///src/app/pages/finished-meter/add-edit-finished-meter/add-edit-finished-meter.component.html","webpack:///src/app/@theme/model/finished-meter.ts","webpack:///src/app/pages/finished-meter/finished-meter.component.ts","webpack:///src/app/pages/finished-meter/finished-meter-routing.module.ts","webpack:///src/app/pages/finished-meter/finished-meter.module.ts"],"names":["FinishedMeterService","httpClient","commonService","id","get","envUrl","batchId","ctrlId","data","put","qId","pId","providedIn","QualityService","qualityData","post","getBy","AddEditFinishedMeterComponent","qualityService","toastr","finishedMeterService","errorData","formSubmitted","indexOfBatchData","sequenceArray","totalFinishMeter","finishedMeterForm","getData","getAllParty","getAllQuality","getAllMasters","myForm","batchList","reset","user","getUser","getAllQualityWithNameOnly","subscribe","qualityList","error","getAllUserHeads","masterList","event","qualityId","undefined","getAllQualityByParty","partyId","qualityDataList","forEach","element","partyName","controlId","b","masterId","qualityEntryId","getBatchDataBybatchNo","batchData","e","finishMtr","mtr","sequenceId","setSequenceNo","setArrayOfSequence","setfinishedSequenceAccordingToIdReverse","obj","seqNo","push","pid","qid","find","ob","getBatchesByPartyQuality","getBatchByMasterId","rowIndex","colIndex","colName","map","a","reduce","keyCode","which","index","length","item","list","interval","setInterval","field","document","getElementById","focus","clearInterval","idCount","removed","splice","isFinishMtrflag","isSeqIdForExtraflag2","f","count","allSequenceValid","setfinishedSequenceAccordingToId","isIdValid","some","addFinishedMeter","success","i","indexOf","isFirstTime","masterSelected","enableQuality","qualitySelected","batchSelected","resetAll","selector","templateUrl","styleUrls","FinishedMeter","BatchData","isProductionPlanned","isExtra","isBillGenrated","wt","FinishedMeterComponent","routes","path","component","FinishedMeterRoutingModule","forChild","imports","exports","FinishedMeterModule","declarations"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAOaA,oB;AAEX,sCAAoBC,UAApB,EAAkDC,aAAlD,EAA+E;AAAA;;AAA3D,eAAAD,UAAA,GAAAA,UAAA;AAA8B,eAAAC,aAAA,GAAAA,aAAA;AACjD;;;;+CAEoBC,E,EAAE;AACrB,mBAAO,KAAKF,UAAL,CAAgBG,GAAhB,CAAoB,KAAKF,aAAL,CAAmBG,MAAnB,KAA4B,sBAA5B,GAAmDF,EAAvE,CAAP;AACD;;;4CAEc;AACb,mBAAO,KAAKF,UAAL,CAAgBG,GAAhB,CAAoB,KAAKF,aAAL,CAAmBG,MAAnB,KAA4B,cAAhD,CAAP;AACD;;;kDAEuBF,E,EAAE;AACxB,mBAAO,KAAKF,UAAL,CAAgBG,GAAhB,CAAoB,KAAKF,aAAL,CAAmBG,MAAnB,KAA4B,+BAA5B,GAA4DF,EAAhF,CAAP;AACD;;;6CAEkBA,E,EAAE;AACnB,mBAAO,KAAKF,UAAL,CAAgBG,GAAhB,CAAoB,KAAKF,aAAL,CAAmBG,MAAnB,KAA4B,qBAA5B,GAAkDF,EAAtE,CAAP;AACD;;;gDAEqBG,O,EAASC,M,EAAM;AACnC,mBAAO,KAAKN,UAAL,CAAgBG,GAAhB,CAAoB,KAAKF,aAAL,CAAmBG,MAAnB,KAA4B,YAA5B,GAAyCE,MAAzC,GAAgD,GAAhD,GAAoDD,OAAxE,CAAP;AACD;;;2CAEgBE,I,EAAI;AACnB,mBAAO,KAAKP,UAAL,CAAgBQ,GAAhB,CAAoB,KAAKP,aAAL,CAAmBG,MAAnB,KAA4B,qBAAhD,EAAuEG,IAAvE,CAAP;AACD;;;mDAEwBE,G,EAAIC,G,EAAG;AAC9B,mBAAO,KAAKV,UAAL,CAAgBG,GAAhB,CAAoB,KAAKF,aAAL,CAAmBG,MAAnB,KAA4B,yCAA5B,GAAsEK,GAAtE,GAA0E,GAA1E,GAA8EC,GAAlG,CAAP;AACD;;;;;;;yBA/BUX,oB,EAAoB,uH,EAAA,qH;AAAA,O;;;eAApBA,oB;AAAoB,iBAApBA,oBAAoB,K;AAAA,oBAFnB;;;;;wEAEDA,oB,EAAoB;gBAHhC,wDAGgC;iBAHrB;AACVY,sBAAU,EAAE;AADF,W;AAGqB,U;;;;;;;;;;;;;;;;;;;;;;;;ACPjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAOaC,c;AACX,gCAAoBZ,UAApB,EAAoDC,aAApD,EAAkF;AAAA;;AAA9D,eAAAD,UAAA,GAAAA,UAAA;AAAgC,eAAAC,aAAA,GAAAA,aAAA;AAAiC;;;;qCAE1EY,W,EAAa;AACtB,mBAAO,KAAKb,UAAL,CAAgBc,IAAhB,CAAqB,KAAKb,aAAL,CAAmBG,MAAnB,KAA8B,aAAnD,EAAkES,WAAlE,CAAP;AACD;;;wCAEaX,E,EAAIa,K,EAAK;AACrB,mBAAO,KAAKf,UAAL,CAAgBG,GAAhB,CAAoB,KAAKF,aAAL,CAAmBG,MAAnB,KAA8B,kBAA9B,GAAmDW,KAAnD,GAA2D,GAA3D,GAAiEb,EAArF,CAAP;AACD;;;sDAEwB;AACvB,mBAAO,KAAKF,UAAL,CAAgBG,GAAhB,CAAoB,KAAKF,aAAL,CAAmBG,MAAnB,KAA4B,wBAAhD,CAAP;AACD;;;yCAEcF,E,EAAE;AACf,mBAAO,KAAKF,UAAL,CAAgBG,GAAhB,CAAoB,KAAKF,aAAL,CAAmBG,MAAnB,KAA4B,cAA5B,GAA2CF,EAA/D,CAAP;AACD;;;4CAEiBW,W,EAAW;AAC3B,mBAAO,KAAKb,UAAL,CAAgBQ,GAAhB,CAAoB,KAAKP,aAAL,CAAmBG,MAAnB,KAA8B,aAAlD,EAAiES,WAAjE,CAAP;AACD;;;+CACoB;AACnB,mBAAO,KAAKb,UAAL,CAAgBG,GAAhB,CAAoB,KAAKF,aAAL,CAAmBG,MAAnB,KAA8B,wBAAlD,CAAP;AACD;;;4CACiBF,E,EAAE;AAClB,mBAAO,KAAKF,UAAL,CAAgBG,GAAhB,CAAoB,KAAKF,aAAL,CAAmBG,MAAnB,KAA8B,sBAA9B,GAAuDF,EAA3E,CAAP;AACH;;;;;;;yBA3BYU,c,EAAc,uH,EAAA,qH;AAAA,O;;;eAAdA,c;AAAc,iBAAdA,cAAc,K;AAAA,oBAFb;;;;;wEAEDA,c,EAAc;gBAH1B,wDAG0B;iBAHf;AACVD,sBAAU,EAAE;AADF,W;AAGe,U;;;;;;;;;;;;;;;;;;;;;;;;ACP3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACgBgB;;AAAiE;;AAAmB;;;;;;AAAvC;;AAAoB;;AAAA;;;;;;AASjE;;AAAsD;;AAAe;;;;;;AAA9B;;AAAe;;AAAA;;;;;;AAStD;;AAA8E;;AAC9E;;;;;;AADyC;;AAAqC;;AAAA;;;;;;AAa9E;;AAA2F;;AAC3F;;;;;;AADuC,uGAA+B,OAA/B,EAA+B,aAA/B;;AAAoD;;AAAA;;;;;;;;;;;;;;;;;;;;AAezF;;AAAsC;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACQ;;;;AAA5C;;;;;;AAgBF;;AAEE;;AAAM;;AAAQ;;AAChB;;;;;;;;;;;;;;AARA;;AAEsC;AAAA;;AAAA;AAAA;AAAA,aAA2B,OAA3B,EAA2B;AAAA;;AAAA;;AAAA;;AAAA,yDAC9B,CAD8B,EAC5B,QAD4B;AACpB,WADP;;AAFtC;;AAKA;;;;;;;;;;;AAHE;;AADA,iJAAiE,SAAjE,EAAiE,iBAAjE,EAAiE,IAAjE,EAAiE,iCAAjE,EAAiE,SAAjE,EAAiE,4GAAjE;;AAI4B;;AAAA;;;;;;AAc9B;;AAEE;;AAAM;;AAAQ;;AAChB;;;;;;;;AARA;;AAEE;AAAA;;AAAA;AAAA;AAAA,aAA4B,OAA5B,EAA4B;AAAA;;AAAA;;AAAA;;AAAA,yDAAkC,CAAlC,EAAoC,UAApC;AAA8C,WAA1E;;AAFF;;AAKA;;;;;;;;;;;AAL+D;;AAC/D,iJAAiE,SAAjE,EAAiE,kBAAjE,EAAiE,IAAjE,EAAiE,iCAAjE,EAAiE,SAAjE,EAAiE,4GAAjE;;AAI8B;;AAAA;;;;;;AAU9B;;AACE;;AACE;;AACF;;AACF;;;;;;AAFI;;AAAA;;;;;;AAlDd;;AACE;;AACE;;AAGE;;AACE;;AAIF;;AAEA;;AAGA;;AAEA;;AACE;;AAWF;;AAEA;;AACE;;AAWF;;AAEA;;AACE;;AAQF;;AAEF;;AACF;;AACF;;;;;;AAvDM;;AAAA,+GAAoC,cAApC,EAAoC,EAApC,EAAoC,cAApC,EAAoC,EAApC;;AAS4D;;AAAA,sFAAkB,OAAlB,EAAkB,GAAlB;;AAGX;;AAAA,sFAAkB,OAAlB,EAAkB,GAAlB;;AAEU;;AAAA,sFAAkB,OAAlB,EAAkB,GAAlB;;AAcU;;AAAA,sFAAkB,OAAlB,EAAkB,GAAlB;;;;UDzEtEK,6B;AAiBX,+CACUf,aADV,EAEUgB,cAFV,EAGUC,MAHV,EAIUC,oBAJV,EAIoD;AAAA;;AAH1C,eAAAlB,aAAA,GAAAA,aAAA;AACA,eAAAgB,cAAA,GAAAA,cAAA;AACA,eAAAC,MAAA,GAAAA,MAAA;AACA,eAAAC,oBAAA,GAAAA,oBAAA;AApBH,eAAAC,SAAA,GAAkB,sDAAlB;AAGP,eAAAC,aAAA,GAAgB,KAAhB;AAOA,eAAAC,gBAAA,GAA2B,CAA3B;AACA,eAAAC,aAAA,GAA+B,EAA/B;AACO,eAAAC,gBAAA,GAA2B,CAA3B;AAEP,eAAAC,iBAAA,GAAmC,IAAI,4EAAJ,EAAnC;AAOI;;;;qCAEI;AACN,iBAAKC,OAAL;AACA,iBAAKC,WAAL;AACA,iBAAKC,aAAL;AACA,iBAAKC,aAAL;AACD,W,CAED;;;;mCACSC,M,EAAQ;AACf,iBAAKC,SAAL,GAAiB,IAAjB;AACAD,kBAAM,CAACE,KAAP;AACD,W,CAED;;;;oCACU;AACR,iBAAKC,IAAL,GAAY,KAAKhC,aAAL,CAAmBiC,OAAnB,EAAZ;AACD,W,CAED;;;;wCACc,CACb,C,CAED;;;;0CACgB;AAAA;;AACd,iBAAKjB,cAAL,CAAoBkB,yBAApB,GAAgDC,SAAhD,CACE,UAAC7B,IAAD,EAAU;AACR,kBAAIA,IAAI,CAAC,SAAD,CAAR,EAAqB;AACnB,qBAAI,CAAC8B,WAAL,GAAmB9B,IAAI,CAAC,MAAD,CAAvB;AACD,eAFD,MAEO,KAAI,CAACW,MAAL,CAAYoB,KAAZ,CAAkB/B,IAAI,CAAC,KAAD,CAAtB;AACR,aALH,EAME,UAAC+B,KAAD,EAAW;AACT,mBAAI,CAACpB,MAAL,CAAYoB,KAAZ,CAAkB,wEAAlB;AACD,aARH;AAUD,W,CAED;;;;0CACgB;AAAA;;AACd,iBAAKnB,oBAAL,CAA0BoB,eAA1B,GAA4CH,SAA5C,CACE,UAAC7B,IAAD,EAAU;AACR,kBAAIA,IAAI,CAAC,SAAD,CAAR,EAAqB;AACnB,sBAAI,CAACiC,UAAL,GAAkBjC,IAAI,CAAC,MAAD,CAAtB;AACD,eAFD,MAEO,MAAI,CAACW,MAAL,CAAYoB,KAAZ,CAAkB/B,IAAI,CAAC,KAAD,CAAtB;AACR,aALH,EAME,UAAC+B,KAAD,EAAW;AACT,oBAAI,CAACpB,MAAL,CAAYoB,KAAZ,CAAkB,wEAAlB;AACD,aARH;AAUD,W,CAED;;;;wCACcG,K,EAAO;AAAA;;AACnB,iBAAKJ,WAAL,GAAmB,IAAnB;AACA,iBAAKZ,iBAAL,CAAuBiB,SAAvB,GAAmC,IAAnC;;AACA,gBAAID,KAAK,IAAIE,SAAb,EAAwB;AACtB,mBAAKxB,oBAAL,CACGyB,oBADH,CACwB,KAAKnB,iBAAL,CAAuBoB,OAD/C,EAEGT,SAFH,CAGI,UAAC7B,IAAD,EAAU;AACR,oBAAIA,IAAI,CAAC,SAAD,CAAR,EAAqB;AACnB,wBAAI,CAAC8B,WAAL,GAAmB9B,IAAI,CAAC,MAAD,CAAJ,CAAauC,eAAhC;;AACA,wBAAI,CAACT,WAAL,CAAiBU,OAAjB,CAAyB,UAACC,OAAD,EAAa;AACpCA,2BAAO,CAACC,SAAR,GAAoB1C,IAAI,CAAC,MAAD,CAAJ,CAAa0C,SAAjC;AACAD,2BAAO,CAACH,OAAR,GAAkBtC,IAAI,CAAC,MAAD,CAAJ,CAAasC,OAA/B;AACD,mBAHD;AAID,iBAND,MAMO,MAAI,CAAC3B,MAAL,CAAYoB,KAAZ,CAAkB/B,IAAI,CAAC,KAAD,CAAtB;AACR,eAXL,EAYI,UAAC+B,KAAD,EAAW;AACT,sBAAI,CAACpB,MAAL,CAAYoB,KAAZ,CAAkB,wEAAlB;AACD,eAdL;AAgBD,aAjBD,MAiBO;AACL,mBAAKP,SAAL,GAAiB,IAAjB;AACA,mBAAKJ,WAAL;AACA,mBAAKC,aAAL;AACD;AACF,W,CAED;;;;wCACca,K,EAAO;AAAA;;AACnB,gBAAIS,SAAJ;AACA,iBAAKnB,SAAL,CAAegB,OAAf,CAAuB,UAACI,CAAD,EAAO;AAC5B,kBAAI,MAAI,CAAC1B,iBAAL,CAAuBpB,OAAvB,IAAkC8C,CAAC,CAAC9C,OAAxC,EAAiD;AAC/C6C,yBAAS,GAAGC,CAAC,CAACD,SAAd;;AACA,oBAAI,MAAI,CAACzB,iBAAL,CAAuB2B,QAA3B,EAAqC;AACnC;AACA,wBAAI,CAAC3B,iBAAL,CAAuBoB,OAAvB,GAAiCM,CAAC,CAACN,OAAnC;AACA,wBAAI,CAACpB,iBAAL,CAAuBiB,SAAvB,GAAmCS,CAAC,CAACE,cAArC;AACD;AACF;AACF,aATD;AAWA,iBAAKlC,oBAAL,CACGmC,qBADH,CACyB,KAAK7B,iBAAL,CAAuBpB,OADhD,EACyD6C,SADzD,EAEGd,SAFH,CAGI,UAAC7B,IAAD,EAAU;AACR,kBAAIA,IAAI,CAAC,SAAD,CAAR,EAAqB;AACnB,sBAAI,CAACkB,iBAAL,CAAuB8B,SAAvB,GAAmChD,IAAI,CAAC,MAAD,CAAvC;;AAEA,sBAAI,CAACkB,iBAAL,CAAuB8B,SAAvB,CAAiCR,OAAjC,CAAyC,UAAAS,CAAC,EAAE;AAC1C,wBAAI,CAAChC,gBAAL,IAAyBgC,CAAC,CAACC,SAA3B;AACA,sBAAGD,CAAC,CAACE,GAAL,EACEF,CAAC,CAACG,UAAF,GAAeH,CAAC,CAACtD,EAAjB;AACH,iBAJD;;AAKA,sBAAI,CAAC0D,aAAL,CAAmB,KAAnB;;AACA,sBAAI,CAACC,kBAAL;;AACA,sBAAI,CAACC,uCAAL;;AAEA,oBAAIC,GAAG,GAAG,IAAI,wEAAJ,EAAV;AACAA,mBAAG,CAAC1D,OAAJ,GAAcE,IAAI,CAAC,MAAD,CAAJ,CAAa,CAAb,EAAgBF,OAA9B;AACA0D,mBAAG,CAACb,SAAJ,GAAgB3C,IAAI,CAAC,MAAD,CAAJ,CAAa,CAAb,EAAgB2C,SAAhC;AACAa,mBAAG,CAACC,KAAJ,GAAY,MAAI,CAAC1C,gBAAjB;;AACA,sBAAI,CAACG,iBAAL,CAAuB8B,SAAvB,CAAiCU,IAAjC,CAAsC,MAAD,OAAC,CAAD,EAAC,EAAKF,GAAL,CAAtC;;AACA,sBAAI,CAACH,aAAL,CAAmB,KAAnB;AACD,eAnBO,CAmBN;;AACH,aAvBL,EAwBI,UAACtB,KAAD,EAAW,CACT;AACD,aA1BL;AA4BD,W,CAED;;;;0CACgBG,K,EAAO;AAAA;;AACrB,gBAAIA,KAAK,IAAIE,SAAb,EAAwB;AACtB,mBAAKlB,iBAAL,CAAuBpB,OAAvB,GAAiC,IAAjC;AACA,mBAAK0B,SAAL,GAAiB,IAAjB;AACA,kBAAImC,GAAJ;AACA,kBAAIC,GAAJ,CAJsB,CAMtB;;AACA,kBAAI,CAAC,KAAK1C,iBAAL,CAAuBoB,OAA5B,EAAqC;AACnC,oBAAIkB,GAAG,GAAG,KAAK1B,WAAL,CAAiB+B,IAAjB,CACR,UAACC,EAAD;AAAA,yBAAQA,EAAE,CAACnE,EAAH,KAAU,MAAI,CAACuB,iBAAL,CAAuBiB,SAAzC;AAAA,iBADQ,CAAV;AAGA,qBAAKjB,iBAAL,CAAuBoB,OAAvB,GAAiCkB,GAAG,CAAClB,OAArC;AACD;;AAED,mBAAKR,WAAL,CAAiBU,OAAjB,CAAyB,UAACS,CAAD,EAAO;AAC9B,oBAAItD,EAAE,GAAGsD,CAAC,CAACtD,EAAF,GAAOsD,CAAC,CAACtD,EAAT,GAAcsD,CAAC,CAACH,cAAzB;;AACA,oBAAInD,EAAE,IAAI,MAAI,CAACuB,iBAAL,CAAuBiB,SAAjC,EAA4C;AAC1CwB,qBAAG,GAAGV,CAAC,CAACX,OAAR;AACAsB,qBAAG,GAAGjE,EAAN;AACD;AACF,eAND;AAQA,mBAAKiB,oBAAL,CAA0BmD,wBAA1B,CAAmDH,GAAnD,EAAwDD,GAAxD,EAA6D9B,SAA7D,CACE,UAAC7B,IAAD,EAAU;AACR,oBAAIA,IAAI,CAAC,SAAD,CAAR,EAAqB;AACnB,wBAAI,CAACwB,SAAL,GAAiBxB,IAAI,CAAC,MAAD,CAArB;AACD,iBAHO,CAGN;;AACH,eALH,EAME,UAAC+B,KAAD,EAAW,CACT;AACD,eARH;AAUD,aAhCD,MAgCO;AACL,mBAAKb,iBAAL,CAAuBpB,OAAvB,GAAiC,IAAjC;AACA,mBAAK0B,SAAL,GAAiB,IAAjB;AACA,mBAAKH,aAAL;AACD;AACF,W,CAED;;;;yCACea,K,EAAO;AAAA;;AACpB,iBAAKV,SAAL,GAAiB,IAAjB;AACA,iBAAKN,iBAAL,CAAuBpB,OAAvB,GAAiC,IAAjC;;AACA,gBAAIoC,KAAK,IAAIE,SAAb,EAAwB;AACtB,mBAAKN,WAAL,CAAiBU,OAAjB,CAAyB,UAACS,CAAD,EAAO;AAC9B,oBAAItD,EAAE,GAAGsD,CAAC,CAACtD,EAAF,GAAOsD,CAAC,CAACtD,EAAT,GAAcsD,CAAC,CAACH,cAAzB;AACA,oBAAInD,EAAE,IAAI,MAAI,CAACuB,iBAAL,CAAuBiB,SAAjC,EACE,MAAI,CAACjB,iBAAL,CAAuBoB,OAAvB,GAAiCW,CAAC,CAACX,OAAnC;AACH,eAJD,EADsB,CAOtB;;AACA,mBAAK1B,oBAAL,CACGoD,kBADH,CACsB,KAAK9C,iBAAL,CAAuB2B,QAD7C,EAEGhB,SAFH,CAGI,UAAC7B,IAAD,EAAU;AACR,oBAAIA,IAAI,CAAC,SAAD,CAAR,EAAqB;AACnB,wBAAI,CAACwB,SAAL,GAAiBxB,IAAI,CAAC,MAAD,CAArB;AACD,iBAFD,MAEO,MAAI,CAACW,MAAL,CAAYoB,KAAZ,CAAkB/B,IAAI,CAAC,KAAD,CAAtB;AACR,eAPL,EAQI,UAAC+B,KAAD,EAAW,CAAE,CARjB;AAUD,aAlBD,MAkBO;AACL,mBAAKX,WAAL;AACD;AACF,W,CAED;;;;kCACQ6B,C,EAAGgB,Q,EAAUC,Q,EAAUC,O,EAAS;AAAA;;AACtC;AACA,iBAAKlD,gBAAL,GAAwB,KAAKC,iBAAL,CAAuB8B,SAAvB,CACrBoB,GADqB,CACjB,UAACC,CAAD;AAAA,qBAAOA,CAAC,CAACnB,SAAT;AAAA,aADiB,EAErBoB,MAFqB,CAEd,UAAUD,CAAV,EAAazB,CAAb,EAAgB;AACtB,qBAAOyB,CAAC,GAAGzB,CAAX;AACD,aAJqB,CAAxB;AAMA,gBAAI2B,OAAO,GAAGtB,CAAC,CAACsB,OAAF,GAAYtB,CAAC,CAACsB,OAAd,GAAwBtB,CAAC,CAACuB,KAAxC;;AACA,gBAAID,OAAO,IAAI,EAAX,KAAkBL,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,IAAI,CAA/C,CAAJ,EAAuD;AACrD,mBAAKO,KAAL,GAAa,eAAeR,QAAQ,GAAG,CAA1B,IAA+B,GAA/B,GAAqCC,QAAlD;;AACA,kBAAID,QAAQ,KAAK,KAAK/C,iBAAL,CAAuB8B,SAAvB,CAAiC0B,MAAjC,GAA0C,CAA3D,EAA8D;AAC5D,oBAAIC,IAAI,GAAG,KAAKzD,iBAAL,CAAuB8B,SAAvB,CAAiCiB,QAAjC,CAAX;;AACA,oBAAIE,OAAO,IAAI,QAAf,EAAyB;AACvB,sBAAI,CAACQ,IAAI,CAACzB,SAAV,EAAqB;AACnB,yBAAKvC,MAAL,CAAYoB,KAAZ,CAAkB,gDAAlB;AACA;AACD;AACF,iBALD,MAKO,IAAIoC,OAAO,IAAI,UAAf,EAA2B;AAChC,sBAAI,CAACQ,IAAI,CAACzB,SAAV,EAAqB;AACnB,yBAAKvC,MAAL,CAAYoB,KAAZ,CAAkB,gDAAlB;AACA;AACD;AACF;;AACD,oBAAIyB,GAAG,GAAG,IAAI,wEAAJ,EAAV;AACAA,mBAAG,CAACC,KAAJ,GAAY,KAAK1C,gBAAL,GAAwB,CAApC;AACAyC,mBAAG,CAAC1D,OAAJ,GAAc,KAAKoB,iBAAL,CAAuB8B,SAAvB,CAAiC,CAAjC,EAAoClD,OAAlD;AACA0D,mBAAG,CAACb,SAAJ,GAAgB,KAAKzB,iBAAL,CAAuB8B,SAAvB,CAAiC,CAAjC,EAAoCL,SAApD;AACA,oBAAIiC,IAAI,GAAG,KAAK1D,iBAAL,CAAuB8B,SAAlC;AACA4B,oBAAI,CAAClB,IAAL,CAAUF,GAAV;AACA,qBAAKtC,iBAAL,CAAuB8B,SAAvB,sBAAuC4B,IAAvC;AACA,oBAAIC,QAAQ,GAAGC,WAAW,CAAC,YAAM;AAC/B,sBAAIC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAI,CAACR,KAA7B,CAAZ;;AACA,sBAAIM,KAAK,IAAI,IAAb,EAAmB;AACjBA,yBAAK,CAACG,KAAN;AACAC,iCAAa,CAACN,QAAD,CAAb;AACD;AACF,iBANyB,EAMvB,EANuB,CAA1B;AAOA,qBAAKxB,aAAL,CAAmB,KAAnB;AACD,eA5BD,MA4BO;AACL,oBAAIwB,SAAQ,GAAGC,WAAW,CAAC,YAAM;AAC/B,sBAAIC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAI,CAACR,KAA7B,CAAZ;;AACA,sBAAIM,KAAK,IAAI,IAAb,EAAmB;AACjBA,yBAAK,CAACG,KAAN;AACAC,iCAAa,CAACN,SAAD,CAAb;AACD;AACF,iBANyB,EAMvB,EANuB,CAA1B;AAOD;AACF;AACF,W,CAED;;;;sCACY3C,K,EAAO+B,Q,EAAU;AAC3B,gBAAImB,OAAO,GAAG,KAAKlE,iBAAL,CAAuB8B,SAAvB,CAAiC0B,MAA/C;AACA,gBAAIC,IAAI,GAAG,KAAKzD,iBAAL,CAAuB8B,SAAlC;;AACA,gBAAIoC,OAAO,IAAI,CAAf,EAAkB;AAChB,kBAAI5B,GAAG,GAAG,IAAI,wEAAJ,EAAV;AACAA,iBAAG,CAAC1D,OAAJ,GAAc,KAAKoB,iBAAL,CAAuB8B,SAAvB,CAAiC,CAAjC,EAAoClD,OAAlD;AACA0D,iBAAG,CAACb,SAAJ,GAAgB,KAAKzB,iBAAL,CAAuB8B,SAAvB,CAAiC,CAAjC,EAAoCL,SAApD;AACA,kBAAIiC,IAAI,GAAG,CAAC,MAAD,OAAC,CAAD,EAAC,EAAKpB,GAAL,CAAD,CAAX;AACA,mBAAKtC,iBAAL,CAAuB8B,SAAvB,aAAuC4B,IAAvC;AACD,aAND,MAMO,IAAIQ,OAAO,GAAG,CAAV,IAAenB,QAAnB,EAA6B;AAClC,mBAAKtD,MAAL,CAAYoB,KAAZ,CAAkB,2BAAlB;AACD,aAFM,MAEA;AACL,kBAAIsD,OAAO,GAAGV,IAAI,CAACW,MAAL,CAAYrB,QAAZ,EAAsB,CAAtB,CAAd;AACA,kBAAIW,KAAI,GAAGD,IAAX;AACA,mBAAKzD,iBAAL,CAAuB8B,SAAvB,sBAAuC4B,KAAvC;AACA,mBAAK5D,aAAL,CAAmBsE,MAAnB,CAA0BrB,QAA1B,EAAoC,CAApC;AACD;;AACD,iBAAKZ,aAAL,CAAmB,KAAnB;AACD,W,CAED;;;;2CACiB9B,M,EAAQ;AAAA;;AACvB,gBAAIgE,eAAe,GAAG,KAAtB;AACA,gBAAIC,oBAAoB,GAAG,KAA3B;AACA,iBAAKtE,iBAAL,CAAuB8B,SAAvB,CAAiCR,OAAjC,CAAyC,UAACI,CAAD,EAAO;AAC9C,kBAAIA,CAAC,CAACM,SAAF,IAAe,IAAnB,EAAyB;AACvBqC,+BAAe,GAAG,IAAlB;AACD;;AACD,kBACE3C,CAAC,CAACjD,EAAF,IAAQ,CAAR,IACAiD,CAAC,CAACM,SAAF,GAAc,CADd,KAECN,CAAC,CAACQ,UAAF,IAAgB,CAAhB,IAAqBR,CAAC,CAACQ,UAAF,IAAgB,IAFtC,CADF,EAKEoC,oBAAoB,GAAG,IAAvB;AACH,aAVD;;AAWA,gBAAID,eAAe,IAAI,KAAvB,EAA8B;AAC5B,kBAAIC,oBAAJ,EAA0B;AACxB,qBAAK7E,MAAL,CAAYoB,KAAZ,CAAkB,0CAAlB;AACD,eAFD,MAEO;AACL,oBAAI0D,CAAC,GAAG,KAAR;AACA,qBAAKvE,iBAAL,CAAuB8B,SAAvB,CAAiCR,OAAjC,CAAyC,UAACS,CAAD,EAAO;AAC9C,sBAAI,CAACA,CAAC,CAACE,GAAP,EAAY,IAAI,CAACF,CAAC,CAACC,SAAH,IAAgBD,CAAC,CAACG,UAAtB,EAAkCqC,CAAC,GAAG,IAAJ;AAC/C,iBAFD;;AAGA,oBAAIA,CAAJ,EAAO;AACL,uBAAK9E,MAAL,CAAYoB,KAAZ,CAAkB,gDAAlB;AACD,iBAFD,MAEO;AACL,sBAAI2D,KAAK,GAAG,CAAZ;AACA,uBAAKxE,iBAAL,CAAuB8B,SAAvB,CAAiCR,OAAjC,CAAyC,UAACS,CAAD,EAAO;AAC9C,wBACEA,CAAC,CAACtD,EAAF,IAAQ,CAAR,IACAsD,CAAC,CAACE,GAAF,IAAS,IADT,KAECF,CAAC,CAACC,SAAF,IAAe,CAAf,IAAoBD,CAAC,CAACC,SAAF,IAAe,IAFpC,CADF,EAIE;AACA,4BAAI,CAAChC,iBAAL,CAAuB8B,SAAvB,CAAiCsC,MAAjC,CAAwCI,KAAxC,EAA+C,CAA/C;AACD;;AACDA,yBAAK;AACN,mBATD;AAWA,sBAAIC,gBAAgB,GAAG,IAAvB;AACA,uBAAKC,gCAAL;AACA,uBAAK1E,iBAAL,CAAuB8B,SAAvB,CAAiCR,OAAjC,CAAyC,UAACS,CAAD,EAAO;AAC9C,wBAAI4C,SAAS,GAAG,MAAI,CAAC3E,iBAAL,CAAuB8B,SAAvB,CAAiC8C,IAAjC,CACd,UAAChC,EAAD;AAAA,6BAAQA,EAAE,CAACnE,EAAH,KAAUsD,CAAC,CAACG,UAApB;AAAA,qBADc,CAAhB;;AAGA,wBAAI,CAACyC,SAAL,EAAgBF,gBAAgB,GAAG,KAAnB;AACjB,mBALD;;AAMA,sBAAIA,gBAAJ,EAAsB;AACpB,yBAAK/E,oBAAL,CACGmF,gBADH,CACoB,KAAK7E,iBAAL,CAAuB8B,SAD3C,EAEGnB,SAFH,CAGI,UAAC7B,IAAD,EAAU;AACR,0BAAIA,IAAI,CAAC,SAAD,CAAR,EAAqB;AACnB,8BAAI,CAACW,MAAL,CAAYqF,OAAZ,CAAoBhG,IAAI,CAAC,KAAD,CAAxB;;AACAuB,8BAAM,CAACE,KAAP;AACA,8BAAI,CAACD,SAAL,GAAiB,IAAjB;AACA,8BAAI,CAACN,iBAAL,CAAuB8B,SAAvB,GAAmC,IAAnC;AACD,uBALD,MAKO;AACL,8BAAI,CAACrC,MAAL,CAAYoB,KAAZ,CAAkB/B,IAAI,CAAC,KAAD,CAAtB;;AACA,8BAAI,CAACqD,aAAL,CAAmB,KAAnB;AACD;AACF,qBAbL,EAcI,UAACtB,KAAD,EAAW;AACT,4BAAI,CAACpB,MAAL,CAAYoB,KAAZ,CAAkB,wEAAlB;;AACA,4BAAI,CAACsB,aAAL,CAAmB,KAAnB;AACD,qBAjBL;AAmBD,mBApBD,MAoBO;AACL,yBAAK1C,MAAL,CAAYoB,KAAZ,CAAkB,6BAAlB;AACA,yBAAKwB,uCAAL;AACD;AACF;AACF;AACF,aAzDD,MAyDO;AACL,mBAAK5C,MAAL,CAAYoB,KAAZ,CAAkB,gBAAlB;AACD;AACF;;;+CAEoB;AACnB,iBAAK,IAAIkE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKlF,gBAAL,GAAwB,CAA5C,EAA+CkF,CAAC,EAAhD,EAAoD;AAClD,mBAAKjF,aAAL,CAAmBiF,CAAnB,IAAwB,KAAK/E,iBAAL,CAAuB8B,SAAvB,CAAiCiD,CAAjC,EAAoCtG,EAA5D;AACD;AACF,W,CAED;;;;6DACmC;AAAA;;AACjC,iBAAKuB,iBAAL,CAAuB8B,SAAvB,CAAiCR,OAAjC,CAAyC,UAACS,CAAD,EAAO;AAC9CA,eAAC,CAACG,UAAF,GAAe,MAAI,CAACpC,aAAL,CAAmBiC,CAAC,CAACG,UAAF,GAAe,CAAlC,CAAf;AACD,aAFD;AAGD,W,CAED;;;;oEAC0C;AAAA;;AACxC,iBAAKlC,iBAAL,CAAuB8B,SAAvB,CAAiCR,OAAjC,CAAyC,UAACS,CAAD,EAAO;AAC9CA,eAAC,CAACG,UAAF,GAAe,OAAI,CAACpC,aAAL,CAAmBkF,OAAnB,CAA2BjD,CAAC,CAACG,UAA7B,IAA2C,CAA1D;AACD,aAFD;AAGD;;;wCAEa+C,W,EAAa;AAAA;;AACzB,iBAAKpF,gBAAL,GAAwB,CAAxB;AACA,iBAAKG,iBAAL,CAAuB8B,SAAvB,CAAiCR,OAAjC,CAAyC,UAACS,CAAD,EAAO;AAC9CA,eAAC,CAACQ,KAAF,GAAU,OAAI,CAAC1C,gBAAf;AACA,qBAAI,CAACA,gBAAL;AACA,kBAAIoF,WAAJ,EAAiBlD,CAAC,CAACG,UAAF,GAAeH,CAAC,CAACtD,EAAjB;AAClB,aAJD;AAKD;;;;;;;yBAvYUc,6B,EAA6B,gJ,EAAA,kJ,EAAA,yH,EAAA,+J;AAAA,O;;;cAA7BA,6B;AAA6B,oD;AAAA,iB;AAAA,gB;AAAA,kpE;AAAA;AAAA;;;ACb1C;;AACE;;AACE;;AACE;;AAAoB;;AAAc;;AACpC;;AACF;;AACA;;AACE;;AACE;;AACE;;AACE;;AACE;;AACE;;AAAO;;AAAM;;AACb;;AAA2B;AAAA;AAAA,eAAwC,QAAxC,EAAwC;AAAA,qBACO,IAAA2F,cAAA,QADP;AAC6B,aADrE;;AAGzB;;AACF;;AACF;;AACF;;AACA;;AACE;;AACE;;AAAO;;AAAK;;AACZ;;AAA0B;AAAA;AAAA,eAAuC,QAAvC,EAAuC;AAAA,qBACrD,IAAAC,aAAA,QADqD;AAChC,aADP;;AAExB;;AACF;;AACF;;AACF;;AACA;;AACE;;AACE;;AAAO;;AAAO;;AACd;;AAA4B;AAAA;AAAA,eAAyC,QAAzC,EAAyC;AAAA,qBAC5B,IAAAC,eAAA,QAD4B;AACL,aADpC;;AAE1B;;AAEF;;AACF;;AACF;;AACF;;AAEA;;AACE;;AACE;;AACE;;AAAO;;AAAK;;AACZ;;AAA0B;AAAA;AAAA,eAAuC,QAAvC,EAAuC;AAAA,qBAC1B,IAAAC,aAAA,QAD0B;AACL,aADlC;;AAExB;;AAEF;;AACF;;AACF;;AACF;;AAEA;;AACA;;AA4DA;;AACE;;AACE;;AACE;;AAAkD;AAAA;;AAAA;;AAAA,qBAAS,IAAAC,QAAA,KAAT;AAAyB,aAAzB;;AACd;;AAAM;;AAC1C;;AACE;AAAA;;AAAA;;AAAA,qBAAS,IAAAT,gBAAA,KAAT;AAAiC,aAAjC;;AAAmC;;AAAI;;AAC3C;;AACF;;AACF;;AACF;;AACF;;AACF;;AACF;;;;;;AAnHyC;;AAAA,gHAAwC,SAAxC,EAAwC,wGAAxC;;AAGd;;AAAA;;AAOa;;AAAA;;AAEb;;AAAA;;AAOe;;AAAA;;AAEf;;AAAA;;AAWa;;AAAA;;AAEb;;AAAA;;AAQF;;AAAA;;;;;;;;;wED1CZtF,6B,EAA6B;gBALzC,uDAKyC;iBAL/B;AACTgG,oBAAQ,EAAE,6BADD;AAETC,uBAAW,EAAE,0CAFJ;AAGTC,qBAAS,EAAE,CAAC,0CAAD;AAHF,W;AAK+B,U;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEb1C;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAAaC,a,GAAb;AAAA;;AAQI,aAAA9G,OAAA,GAAiB,IAAjB;AAEH,O;;UAEY+G,S,GAaT;AAAA;;AANA,aAAAC,mBAAA,GAA8B,KAA9B;AACA,aAAAC,OAAA,GAAkB,KAAlB;AAGA,aAAAC,cAAA,GAAyB,KAAzB;AAGI,aAAKvD,KAAL,GAAY,CAAZ;AACA,aAAK9D,EAAL,GAAQ,CAAR;AACA,aAAKwD,GAAL,GAAS,IAAT;AACA,aAAK8D,EAAL,GAAQ,IAAR;AACA,aAAKnH,OAAL,GAAa,EAAb;AACA,aAAK6C,SAAL,GAAe,CAAf;AACA,aAAKmE,mBAAL,GAA0B,KAA1B;AACA,aAAKC,OAAL,GAAc,KAAd;AACA,aAAK3D,UAAL,GAAgB,CAAhB;AACA,aAAKF,SAAL,GAAe,CAAf;AACA,aAAK8D,cAAL,GAAqB,KAArB;AACH,O;;;;;;;;;;;;;;;;;ACrCL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAQaE,sB;AAEX,wCAAoBxH,aAApB,EAAiD;AAAA;;AAA7B,eAAAA,aAAA,GAAAA,aAAA;AAAgC;;;;qCAE5C,CACP;;;;;;;yBALUwH,sB,EAAsB,gJ;AAAA,O;;;cAAtBA,sB;AAAsB,2C;AAAA,gB;AAAA,e;AAAA,sE;AAAA;;;;;wEAAtBA,sB,EAAsB;gBALlC,uDAKkC;iBALxB;AACTT,oBAAQ,EAAE,oBADD;AAETC,uBAAW,EAAE,iCAFJ;AAGTC,qBAAS,EAAE,CAAC,iCAAD;AAHF,W;AAKwB,U;;;;;;;;;;;;;;;;;;;;;;ACRnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,UAAMQ,MAAM,GAAW,CACrB;AACEC,YAAI,EAAC,EADP;AAEEC,iBAAS,EAAC;AAFZ,OADqB,CAAvB;;UAeaC,0B;;;;;cAAAA;;;;2BAAAA,0B;AAA0B,S;AAAA,kBAJ5B,CAAC,6DAAaC,QAAb,CAAsBJ,MAAtB,CAAD,CAI4B,EAH3B,4DAG2B;;;;4HAA1BG,0B,EAA0B;AAAA;AAAA,oBAH3B,4DAG2B;AAAA,S;AAHf,O;;;;;wEAGXA,0B,EAA0B;gBALtC,sDAKsC;iBAL7B;AACRE,mBAAO,EAAE,CAAC,6DAAaD,QAAb,CAAsBJ,MAAtB,CAAD,CADD;AAERM,mBAAO,EAAE,CAAC,4DAAD;AAFD,W;AAK6B,U;;;;;;;;;;;;;;;;;;ACrBvC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAsBaC,mB;;;;;cAAAA;;;;2BAAAA,mB;AAAmB,S;AAAA,kBATrB,CACP,4DADO,EAEP,oEAFO,EAGP,kEAHO,EAIP,+DAJO,EAKP,0EALO,EAMP,yFANO,CASqB;;;;4HAAnBA,mB,EAAmB;AAAA,yBAVf,gFAUe,EAVS,wHAUT;AAVsC,oBAElE,4DAFkE,EAGlE,oEAHkE,EAIlE,kEAJkE,EAKlE,+DALkE,EAMlE,0EANkE,EAOlE,yFAPkE;AAUtC,S;AAHF,O;;;;;wEAGjBA,mB,EAAmB;gBAX/B,sDAW+B;iBAXtB;AACRC,wBAAY,EAAE,CAAC,gFAAD,EAAyB,wHAAzB,CADN;AAERH,mBAAO,EAAE,CACP,4DADO,EAEP,oEAFO,EAGP,kEAHO,EAIP,+DAJO,EAKP,0EALO,EAMP,yFANO;AAFD,W;AAWsB,U","file":"pages-finished-meter-finished-meter-module-es5.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { CommonService } from './common.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FinishedMeterService {\r\n\r\n  constructor(private httpClient:HttpClient,private commonService:CommonService) { \r\n  }\r\n\r\n  getAllQualityByParty(id){\r\n    return this.httpClient.get(this.commonService.envUrl()+'api/Quality/ByParty/'+id);\r\n  }\r\n  \r\n  getAllUserHeads(){\r\n    return this.httpClient.get(this.commonService.envUrl()+'api/userHead');\r\n  }\r\n\r\n  getPartyQualityByMaster(id){\r\n    return this.httpClient.get(this.commonService.envUrl()+'api/QualityAndParty/ByMaster/'+id);\r\n  }\r\n\r\n  getBatchByMasterId(id){\r\n    return this.httpClient.get(this.commonService.envUrl()+'api/batch/ByMaster/'+id);\r\n  }\r\n\r\n  getBatchDataBybatchNo(batchId, ctrlId){\r\n    return this.httpClient.get(this.commonService.envUrl()+'api/batch/'+ctrlId+'/'+batchId);\r\n  }\r\n\r\n  addFinishedMeter(data){\r\n    return this.httpClient.put(this.commonService.envUrl()+'api/batch/finishMtr', data);\r\n  }\r\n\r\n  getBatchesByPartyQuality(qId,pId){\r\n    return this.httpClient.get(this.commonService.envUrl()+'api/stockBatch/batch/ByQualityAndParty/'+qId+'/'+pId);\r\n  }\r\n  \r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { CommonService } from './common.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QualityService {\r\n  constructor(private httpClient: HttpClient, private commonService: CommonService) { }\r\n\r\n  addQuality(qualityData) {\r\n    return this.httpClient.post(this.commonService.envUrl() + 'api/quality', qualityData);\r\n  }\r\n\r\n  getallQuality(id, getBy): any {\r\n    return this.httpClient.get(this.commonService.envUrl() + 'api/quality/all/' + getBy + '/' + id);\r\n  }\r\n\r\n  getAllQualityWithNameOnly(){\r\n    return this.httpClient.get(this.commonService.envUrl()+'api/quality/allQuality');\r\n  }\r\n\r\n  getQualityById(id): any{\r\n    return this.httpClient.get(this.commonService.envUrl()+'api/quality/'+id);\r\n  }\r\n\r\n  updateQualityById(qualityData): any {\r\n    return this.httpClient.put(this.commonService.envUrl() + 'api/quality', qualityData);\r\n  }\r\n  getQualityNameData() {\r\n    return this.httpClient.get(this.commonService.envUrl() + 'api/quality/allQuality');\r\n  }\r\n  getQualityByParty(id): any{\r\n    return this.httpClient.get(this.commonService.envUrl() + 'api/Quality/ByParty/' + id);\r\n}\r\n}","import { Component, OnInit } from \"@angular/core\";\r\nimport * as errorData from \"app/@theme/json/error.json\";\r\nimport { BatchData, FinishedMeter } from \"app/@theme/model/finished-meter\";\r\nimport { CommonService } from \"app/@theme/services/common.service\";\r\nimport { FinishedMeterService } from \"app/@theme/services/finished-meter.service\";\r\nimport { QualityService } from \"app/@theme/services/quality.service\";\r\nimport { ToastrService } from \"ngx-toastr\";\r\n\r\n@Component({\r\n  selector: \"ngx-add-edit-finished-meter\",\r\n  templateUrl: \"./add-edit-finished-meter.component.html\",\r\n  styleUrls: [\"./add-edit-finished-meter.component.scss\"],\r\n})\r\nexport class AddEditFinishedMeterComponent implements OnInit {\r\n  public errorData: any = (errorData as any).default;\r\n  currentFinishedMeter;\r\n  user;\r\n  formSubmitted = false;\r\n  userHead;\r\n  masterList;\r\n  partyList;\r\n  batchList;\r\n  qualityList;\r\n  index: string;\r\n  indexOfBatchData: number = 1;\r\n  sequenceArray: Array<number> = [];\r\n  public totalFinishMeter: number = 0;\r\n\r\n  finishedMeterForm: FinishedMeter = new FinishedMeter();\r\n\r\n  constructor(\r\n    private commonService: CommonService,\r\n    private qualityService: QualityService,\r\n    private toastr: ToastrService,\r\n    private finishedMeterService: FinishedMeterService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.getData();\r\n    this.getAllParty();\r\n    this.getAllQuality();\r\n    this.getAllMasters();\r\n  }\r\n\r\n  //resetForm..\r\n  resetAll(myForm) {\r\n    this.batchList = null;\r\n    myForm.reset();\r\n  }\r\n\r\n  //get userId and userHeadId of logged in user and get current finishedMeter id from url\r\n  getData() {\r\n    this.user = this.commonService.getUser();\r\n  }\r\n\r\n  //getAll party list\r\n  getAllParty() {\r\n  }\r\n\r\n  //getAll quality list\r\n  getAllQuality() {\r\n    this.qualityService.getAllQualityWithNameOnly().subscribe(\r\n      (data) => {\r\n        if (data[\"success\"]) {\r\n          this.qualityList = data[\"data\"];\r\n        } else this.toastr.error(data[\"msg\"]);\r\n      },\r\n      (error) => {\r\n        this.toastr.error(errorData.Internal_Error);\r\n      }\r\n    );\r\n  }\r\n\r\n  //getAll master list\r\n  getAllMasters() {\r\n    this.finishedMeterService.getAllUserHeads().subscribe(\r\n      (data) => {\r\n        if (data[\"success\"]) {\r\n          this.masterList = data[\"data\"];\r\n        } else this.toastr.error(data[\"msg\"]);\r\n      },\r\n      (error) => {\r\n        this.toastr.error(errorData.Internal_Error);\r\n      }\r\n    );\r\n  }\r\n\r\n  //Party change event | get quality by partyId\r\n  enableQuality(event) {\r\n    this.qualityList = null;\r\n    this.finishedMeterForm.qualityId = null;\r\n    if (event != undefined) {\r\n      this.finishedMeterService\r\n        .getAllQualityByParty(this.finishedMeterForm.partyId)\r\n        .subscribe(\r\n          (data) => {\r\n            if (data[\"success\"]) {\r\n              this.qualityList = data[\"data\"].qualityDataList;\r\n              this.qualityList.forEach((element) => {\r\n                element.partyName = data[\"data\"].partyName;\r\n                element.partyId = data[\"data\"].partyId;\r\n              });\r\n            } else this.toastr.error(data[\"msg\"]);\r\n          },\r\n          (error) => {\r\n            this.toastr.error(errorData.Internal_Error);\r\n          }\r\n        );\r\n    } else {\r\n      this.batchList = null;\r\n      this.getAllParty();\r\n      this.getAllQuality();\r\n    }\r\n  }\r\n\r\n  //get batch data from batchId...\r\n  batchSelected(event) {\r\n    let controlId: string;\r\n    this.batchList.forEach((b) => {\r\n      if (this.finishedMeterForm.batchId == b.batchId) {\r\n        controlId = b.controlId;\r\n        if (this.finishedMeterForm.masterId) {\r\n          //set party and quality according to batch\r\n          this.finishedMeterForm.partyId = b.partyId;\r\n          this.finishedMeterForm.qualityId = b.qualityEntryId;\r\n        }\r\n      }\r\n    });\r\n\r\n    this.finishedMeterService\r\n      .getBatchDataBybatchNo(this.finishedMeterForm.batchId, controlId)\r\n      .subscribe(\r\n        (data) => {\r\n          if (data[\"success\"]) {\r\n            this.finishedMeterForm.batchData = data[\"data\"];\r\n\r\n            this.finishedMeterForm.batchData.forEach(e=>{\r\n              this.totalFinishMeter += e.finishMtr\r\n              if(e.mtr)\r\n                e.sequenceId = e.id\r\n            })\r\n            this.setSequenceNo(false);\r\n            this.setArrayOfSequence();\r\n            this.setfinishedSequenceAccordingToIdReverse();\r\n\r\n            let obj = new BatchData();\r\n            obj.batchId = data[\"data\"][0].batchId;\r\n            obj.controlId = data[\"data\"][0].controlId;\r\n            obj.seqNo = this.indexOfBatchData;\r\n            this.finishedMeterForm.batchData.push({ ...obj });\r\n            this.setSequenceNo(false);\r\n          } //else this.toastr.error(data[\"msg\"]);\r\n        },\r\n        (error) => {\r\n          // this.toastr.error(errorData.Internal_Error);\r\n        }\r\n      );\r\n  }\r\n\r\n  //Quality change event\r\n  qualitySelected(event) {\r\n    if (event != undefined) {\r\n      this.finishedMeterForm.batchId = null;\r\n      this.batchList = null;\r\n      let pid;\r\n      let qid;\r\n\r\n      //set party from quality...\r\n      if (!this.finishedMeterForm.partyId) {\r\n        let obj = this.qualityList.find(\r\n          (ob) => ob.id === this.finishedMeterForm.qualityId\r\n        );\r\n        this.finishedMeterForm.partyId = obj.partyId;\r\n      }\r\n\r\n      this.qualityList.forEach((e) => {\r\n        let id = e.id ? e.id : e.qualityEntryId;\r\n        if (id == this.finishedMeterForm.qualityId) {\r\n          pid = e.partyId;\r\n          qid = id;\r\n        }\r\n      });\r\n\r\n      this.finishedMeterService.getBatchesByPartyQuality(qid, pid).subscribe(\r\n        (data) => {\r\n          if (data[\"success\"]) {\r\n            this.batchList = data[\"data\"];\r\n          } //else this.toastr.error(data[\"msg\"]);\r\n        },\r\n        (error) => {\r\n          //this.toastr.error(errorData.Internal_Error);\r\n        }\r\n      );\r\n    } else {\r\n      this.finishedMeterForm.batchId = null;\r\n      this.batchList = null;\r\n      this.getAllQuality();\r\n    }\r\n  }\r\n\r\n  //Master change event | get party and quality by masterId and batch list by masterId\r\n  masterSelected(event) {\r\n    this.batchList = null;\r\n    this.finishedMeterForm.batchId = null;\r\n    if (event != undefined) {\r\n      this.qualityList.forEach((e) => {\r\n        let id = e.id ? e.id : e.qualityEntryId;\r\n        if (id == this.finishedMeterForm.qualityId)\r\n          this.finishedMeterForm.partyId = e.partyId;\r\n      });\r\n\r\n      //get batch by masterId\r\n      this.finishedMeterService\r\n        .getBatchByMasterId(this.finishedMeterForm.masterId)\r\n        .subscribe(\r\n          (data) => {\r\n            if (data[\"success\"]) {\r\n              this.batchList = data[\"data\"];\r\n            } else this.toastr.error(data[\"msg\"]);\r\n          },\r\n          (error) => {}\r\n        );\r\n    } else {\r\n      this.getAllParty();\r\n    }\r\n  }\r\n\r\n  //On enter pressed -> check empty field, add new row\r\n  onKeyUp(e, rowIndex, colIndex, colName) {\r\n    //catculate total finish meter\r\n    this.totalFinishMeter = this.finishedMeterForm.batchData\r\n      .map((a) => a.finishMtr)\r\n      .reduce(function (a, b) {\r\n        return a + b;\r\n      });\r\n\r\n    var keyCode = e.keyCode ? e.keyCode : e.which;\r\n    if (keyCode == 13 && (colIndex == 3 || colIndex == 4)) {\r\n      this.index = \"batchData\" + (rowIndex + 1) + \"-\" + colIndex;\r\n      if (rowIndex === this.finishedMeterForm.batchData.length - 1) {\r\n        let item = this.finishedMeterForm.batchData[rowIndex];\r\n        if (colName == \"fMeter\") {\r\n          if (!item.finishMtr) {\r\n            this.toastr.error(\"Enter finish meter and sequence to add new row\");\r\n            return;\r\n          }\r\n        } else if (colName == \"sequence\") {\r\n          if (!item.finishMtr) {\r\n            this.toastr.error(\"Enter finish meter and sequence to add new row\");\r\n            return;\r\n          }\r\n        }\r\n        let obj = new BatchData();\r\n        obj.seqNo = this.indexOfBatchData + 1;\r\n        obj.batchId = this.finishedMeterForm.batchData[0].batchId;\r\n        obj.controlId = this.finishedMeterForm.batchData[0].controlId;\r\n        let list = this.finishedMeterForm.batchData;\r\n        list.push(obj);\r\n        this.finishedMeterForm.batchData = [...list];\r\n        let interval = setInterval(() => {\r\n          let field = document.getElementById(this.index);\r\n          if (field != null) {\r\n            field.focus();\r\n            clearInterval(interval);\r\n          }\r\n        }, 10);\r\n        this.setSequenceNo(false);\r\n      } else {\r\n        let interval = setInterval(() => {\r\n          let field = document.getElementById(this.index);\r\n          if (field != null) {\r\n            field.focus();\r\n            clearInterval(interval);\r\n          }\r\n        }, 10);\r\n      }\r\n    }\r\n  }\r\n\r\n  //Remove meter data row from batchData list\r\n  removeMeter(event, rowIndex) {\r\n    let idCount = this.finishedMeterForm.batchData.length;\r\n    let item = this.finishedMeterForm.batchData;\r\n    if (idCount == 1) {\r\n      let obj = new BatchData();\r\n      obj.batchId = this.finishedMeterForm.batchData[0].batchId;\r\n      obj.controlId = this.finishedMeterForm.batchData[0].controlId;\r\n      let list = [{ ...obj }];\r\n      this.finishedMeterForm.batchData = [...list];\r\n    } else if (idCount - 1 == rowIndex) {\r\n      this.toastr.error(\"You can't remove last row\");\r\n    } else {\r\n      let removed = item.splice(rowIndex, 1);\r\n      let list = item;\r\n      this.finishedMeterForm.batchData = [...list];\r\n      this.sequenceArray.splice(rowIndex, 1);\r\n    }\r\n    this.setSequenceNo(false);\r\n  }\r\n\r\n  //Add finished Meter data\r\n  addFinishedMeter(myForm) {\r\n    let isFinishMtrflag = false;\r\n    let isSeqIdForExtraflag2 = false;\r\n    this.finishedMeterForm.batchData.forEach((b) => {\r\n      if (b.finishMtr == null) {\r\n        isFinishMtrflag = true;\r\n      }\r\n      if (\r\n        b.id == 0 &&\r\n        b.finishMtr > 0 &&\r\n        (b.sequenceId == 0 || b.sequenceId == null)\r\n      )\r\n        isSeqIdForExtraflag2 = true;\r\n    });\r\n    if (isFinishMtrflag == false) {\r\n      if (isSeqIdForExtraflag2) {\r\n        this.toastr.error(\"Please enter sequence id for extra meter\");\r\n      } else {\r\n        let f = false;\r\n        this.finishedMeterForm.batchData.forEach((e) => {\r\n          if (!e.mtr) if (!e.finishMtr && e.sequenceId) f = true;\r\n        });\r\n        if (f) {\r\n          this.toastr.error(\"Please fill sequence id and finish meter both.\");\r\n        } else {\r\n          let count = 0;\r\n          this.finishedMeterForm.batchData.forEach((e) => {\r\n            if (\r\n              e.id == 0 &&\r\n              e.mtr == null &&\r\n              (e.finishMtr == 0 || e.finishMtr == null)\r\n            ) {\r\n              this.finishedMeterForm.batchData.splice(count, 1);\r\n            }\r\n            count++;\r\n          });\r\n\r\n          let allSequenceValid = true;\r\n          this.setfinishedSequenceAccordingToId();\r\n          this.finishedMeterForm.batchData.forEach((e) => {\r\n            let isIdValid = this.finishedMeterForm.batchData.some(\r\n              (ob) => ob.id === e.sequenceId\r\n            );\r\n            if (!isIdValid) allSequenceValid = false;\r\n          });\r\n          if (allSequenceValid) {\r\n            this.finishedMeterService\r\n              .addFinishedMeter(this.finishedMeterForm.batchData)\r\n              .subscribe(\r\n                (data) => {\r\n                  if (data[\"success\"]) {\r\n                    this.toastr.success(data[\"msg\"]);\r\n                    myForm.reset();\r\n                    this.batchList = null;\r\n                    this.finishedMeterForm.batchData = null;\r\n                  } else {\r\n                    this.toastr.error(data[\"msg\"]);\r\n                    this.setSequenceNo(false);\r\n                  }\r\n                },\r\n                (error) => {\r\n                  this.toastr.error(errorData.Internal_Error);\r\n                  this.setSequenceNo(false);\r\n                }\r\n              );\r\n          } else {\r\n            this.toastr.error(\"Invalid sequence-id entered\");\r\n            this.setfinishedSequenceAccordingToIdReverse();\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      this.toastr.error(\"Enter all data\");\r\n    }\r\n  }\r\n\r\n  setArrayOfSequence() {\r\n    for (let i = 0; i < this.indexOfBatchData - 1; i++) {\r\n      this.sequenceArray[i] = this.finishedMeterForm.batchData[i].id;\r\n    }\r\n  }\r\n\r\n  //for add\r\n  setfinishedSequenceAccordingToId() {\r\n    this.finishedMeterForm.batchData.forEach((e) => {\r\n      e.sequenceId = this.sequenceArray[e.sequenceId - 1];\r\n    });\r\n  }\r\n\r\n  //for update\r\n  setfinishedSequenceAccordingToIdReverse() {\r\n    this.finishedMeterForm.batchData.forEach((e) => {\r\n      e.sequenceId = this.sequenceArray.indexOf(e.sequenceId) + 1;\r\n    });\r\n  }\r\n\r\n  setSequenceNo(isFirstTime) {\r\n    this.indexOfBatchData = 1;\r\n    this.finishedMeterForm.batchData.forEach((e) => {\r\n      e.seqNo = this.indexOfBatchData;\r\n      this.indexOfBatchData++;\r\n      if (isFirstTime) e.sequenceId = e.id;\r\n    });\r\n  }\r\n}\r\n","<nb-card class=\"nb-style\">\r\n  <nb-card-header class=\"nb-header\">\r\n    <div>\r\n      <h2 class=\"nb-text\">Finished Meter</h2>\r\n    </div>\r\n  </nb-card-header>\r\n  <nb-card-body>\r\n    <div>\r\n      <form #myForm=\"ngForm\">\r\n        <div class=\"row\">\r\n          <div class=\"col-md-4\">\r\n            <div class=\"form-group\">\r\n              <label>Master</label>\r\n              <ng-select name=\"masterId\" [(ngModel)]='finishedMeterForm.masterId' required #partyId1=\"ngModel\"\r\n                [ngClass]=\"{'is-invalid': formSubmitted && partyId1.invalid}\" (change)=\"masterSelected($event)\"\r\n                placeholder=\"Select Master\" class=\"required-error-dropdown\">\r\n                <ng-option *ngFor=\"let master of masterList\" [value]=\"master.id\">{{master.userName}}</ng-option>\r\n              </ng-select>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-md-4\">\r\n            <div class=\"form-group\">\r\n              <label>Party</label>\r\n              <ng-select name=\"partyId\" [(ngModel)]='finishedMeterForm.partyId' #partyId1=\"ngModel\"\r\n                (change)=\"enableQuality($event)\" placeholder=\"Select Party\">\r\n                <ng-option *ngFor=\"let p of partyList\" [value]=\"p.id\">{{p.partyName}}</ng-option>\r\n              </ng-select>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-md-4\">\r\n            <div class=\"form-group\">\r\n              <label>Quality</label>\r\n              <ng-select name=\"qualityId\" [(ngModel)]='finishedMeterForm.qualityId' #qualityId1=\"ngModel\"\r\n                placeholder=\"Select Quality\" (change)=\"qualitySelected($event)\">\r\n                <ng-option *ngFor=\"let q of qualityList\" [value]=\"q.id?q.id:q.qualityEntryId\">{{q.qualityId}}\r\n                </ng-option>\r\n              </ng-select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n          <div class=\"col-md-4\">\r\n            <div class=\"form-group\">\r\n              <label>Batch</label>\r\n              <ng-select name=\"batchId\" [(ngModel)]='finishedMeterForm.batchId' #batchId1=\"ngModel\"\r\n                placeholder=\"Select Batch\" (change)=\"batchSelected($event)\">\r\n                <ng-option *ngFor=\"let b of batchList\" [disabled]=\"b.prodctionPlanned\" [value]=\"b.batchId\">{{b.batchId}}\r\n                </ng-option>\r\n              </ng-select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <br>\r\n        <div class=\"row\" *ngIf=\"finishedMeterForm.batchId\">\r\n          <div class=\"col-md-12\">\r\n            <ngx-datatable #table class=\"material common-table datatable-auto-height\"\r\n              [rows]=\"finishedMeterForm.batchData\" [headerHeight]=\"31\" [footerHeight]=\"30\">\r\n\r\n              <ngx-datatable-column name=\"Action\" sortable=\"false\" prop=\"mtr\">\r\n                <ng-template let-row=\"row\" let-value=\"value\" ngx-datatable-cell-template let-rowIndex=\"rowIndex\">\r\n                  <nb-icon icon=\"trash\" status=\"danger\" (click)=\"removeMeter($event, rowIndex)\"\r\n                    [options]=\"{ animation: { type: 'zoom' } }\"></nb-icon>\r\n                </ng-template>\r\n              </ngx-datatable-column>\r\n\r\n              <ngx-datatable-column name=\"Gr Meter Sequence\" prop=\"seqNo\" [sortable]=\"false\" [width]=\"300\">\r\n              </ngx-datatable-column>\r\n\r\n              <ngx-datatable-column name=\"Gr Meter\" prop=\"mtr\" [sortable]=\"false\" [width]=\"300\"></ngx-datatable-column>\r\n\r\n              <ngx-datatable-column name=\"Finish Meter\" prop=\"finishMtr\" [sortable]=\"false\" [width]=\"300\">\r\n                <ng-template let-row=\"row\" ngx-datatable-cell-template let-rowIndex=\"rowIndex\">\r\n                  <input class=\"tableForm\" type=\"number\"\r\n                    [disabled]=\"finishedMeterForm.batchData[rowIndex].isBillGenrated\" #tableMeter1=\"ngModel\"\r\n                    name='tableFinishMeter{{rowIndex}}' [(ngModel)]=\"row.finishMtr\"\r\n                    (keyup)=\"onKeyUp($event,rowIndex,3,'fMeter')\" [id]=\"'batchData'+rowIndex+'-3'\" required\r\n                    [ngClass]=\"{'is-invalid': formSubmitted && tableMeter1.invalid}\">\r\n                  <div class=\"invalid-feedback\" *ngIf=\"formSubmitted && (tableMeter1.invalid )\"\r\n                    style=\"display: inline-block;\">\r\n                    <span>Required</span>\r\n                  </div>\r\n                </ng-template>\r\n              </ngx-datatable-column>\r\n\r\n              <ngx-datatable-column name=\"Finish Meter Sequence\" prop=\"sequenceId\" [sortable]=\"false\" [width]=\"300\">\r\n                <ng-template let-row=\"row\" ngx-datatable-cell-template let-rowIndex=\"rowIndex\">\r\n                  <input class=\"tableForm\" type=\"number\" #tableWeight1=\"ngModel\" name='tableSequence{{rowIndex}}'\r\n                  [disabled]=\"finishedMeterForm.batchData[rowIndex].isBillGenrated\" \r\n                    [(ngModel)]=\"row.sequenceId\" (keyup)=\"onKeyUp($event,rowIndex,4,'sequence')\"\r\n                    [id]=\"'batchData'+rowIndex+'-4'\" required\r\n                    [ngClass]=\"{'is-invalid': formSubmitted && tableWeight1.invalid}\">\r\n                  <div class=\"invalid-feedback\" *ngIf=\"formSubmitted && (tableWeight1.invalid )\"\r\n                    style=\"display: inline-block;\">\r\n                    <span>Required</span>\r\n                  </div>\r\n                </ng-template>\r\n              </ngx-datatable-column>\r\n\r\n              <ngx-datatable-footer>\r\n                <ng-template ngx-datatable-footer-template let-rowCount=\"rowCount\">\r\n\r\n                  <div class=\"col-md-12\">\r\n                    <div class=\"toal-finish-mtr\">\r\n                      Total finish mtr: {{totalFinishMeter}}\r\n                    </div>\r\n                  </div>\r\n                </ng-template>\r\n              </ngx-datatable-footer>\r\n\r\n            </ngx-datatable>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n          <div class=\"col-md-12 mobile-btn-center text-btn-right\">\r\n            <div class=\"padding-bt-tp\">\r\n              <button class=\"btn btn-primary btn-sm btn-design\" (click)=\"resetAll(myForm)\" type=\"button\"\r\n                routerLink=\"/pages/finishedMeter\">CANCEL</button>\r\n              <button type=\"button\" class=\"btn btn-primary btn-sm btn-design\" style=\"margin-right:20px\"\r\n                (click)=\"addFinishedMeter(myForm)\">SAVE</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </nb-card-body>\r\n</nb-card>","export class FinishedMeter {\r\n    id:Number;\r\n    createdBy:Number;\r\n    updatedBy:Number;\r\n    userHeadId:Number;\r\n    partyId:Number;\r\n    qualityId:Number;\r\n    masterId:Number;\r\n    batchId:Number = null;\r\n    batchData: BatchData[];\r\n}\r\n\r\nexport class BatchData{\r\n    seqNo: number;\r\n    id:number;\r\n    mtr:number;\r\n    wt:number;\r\n    batchId:string;\r\n    controlId:number;\r\n    isProductionPlanned:Boolean = false;\r\n    isExtra:Boolean = false;\r\n    sequenceId:number;\r\n    finishMtr:number;\r\n    isBillGenrated:Boolean = false;\r\n\r\n    constructor(){\r\n        this.seqNo= 0;\r\n        this.id=0;\r\n        this.mtr=null;\r\n        this.wt=null;\r\n        this.batchId='';\r\n        this.controlId=0;\r\n        this.isProductionPlanned= false;\r\n        this.isExtra= false;\r\n        this.sequenceId=0;\r\n        this.finishMtr=0;\r\n        this.isBillGenrated= false;   \r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { CommonService } from 'app/@theme/services/common.service';\r\n\r\n@Component({\r\n  selector: 'ngx-finished-meter',\r\n  templateUrl: './finished-meter.component.html',\r\n  styleUrls: ['./finished-meter.component.scss']\r\n})\r\nexport class FinishedMeterComponent implements OnInit {\r\n\r\n  constructor(private commonService:CommonService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AddEditFinishedMeterComponent } from './add-edit-finished-meter/add-edit-finished-meter.component';\r\n\r\nimport { FinishedMeterComponent } from './finished-meter.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path:'',\r\n    component:AddEditFinishedMeterComponent,\r\n    // canActivate:[FinishedMeterGuard],\r\n    // canLoad:[FinishedMeterGuard],\r\n    \r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n  //providers: [FinishedMeterGuard]\r\n})\r\nexport class FinishedMeterRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FinishedMeterRoutingModule } from './finished-meter-routing.module';\r\nimport { FinishedMeterComponent } from './finished-meter.component';\r\nimport { AddEditFinishedMeterComponent } from './add-edit-finished-meter/add-edit-finished-meter.component';\r\nimport { SharedModule } from 'app/@theme/shared.module';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { NbCheckboxModule } from '@nebular/theme';\r\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\r\n\r\n\r\n@NgModule({\r\n  declarations: [FinishedMeterComponent, AddEditFinishedMeterComponent],\r\n  imports: [\r\n    CommonModule,\r\n    SharedModule,\r\n    ReactiveFormsModule,\r\n    NbCheckboxModule,\r\n    NgxDatatableModule,\r\n    FinishedMeterRoutingModule\r\n  ]\r\n})\r\nexport class FinishedMeterModule { }\r\n"]}